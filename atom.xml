<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tclh123's 3rd Blog]]></title>
  <link href="http://tclh123.github.com/atom.xml" rel="self"/>
  <link href="http://tclh123.github.com/"/>
  <updated>2013-09-08T18:34:01+08:00</updated>
  <id>http://tclh123.github.com/</id>
  <author>
    <name><![CDATA[tclh123]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python Plugin/MixIn/Monkey-patching]]></title>
    <link href="http://tclh123.github.com/blog/2013/08/26/python-plugin-slash-mixin-slash-monkey-patching/"/>
    <updated>2013-08-26T15:50:00+08:00</updated>
    <id>http://tclh123.github.com/blog/2013/08/26/python-plugin-slash-mixin-slash-monkey-patching</id>
    <content type="html"><![CDATA[<p><em>自从到豆瓣实习后，基本就博客就没更了，在github上的活动也都转到了code上&#8230;</em></p>

<h2>Reference</h2>

<ul>
<li><a href="http://markmail.org/message/y2znkmysqjlofswb#query:+page:1+mid:b52kpikcanonjva6+state:results">CPyUG</a></li>
<li><a href="http://abloz.com/2012/03/31/python-plug-ins-mixin-and-monkey-patching.html">python插件方式mixin和monkey-patching</a></li>
<li><a href="http://scg.unibe.ch/archive/papers/Duca06bTOPLASTraits.pdf">Traits: A Mechanism for Fine-grained Reuse</a></li>
<li><a href="http://guangboo.org/2013/01/28/python-mixin-programming">Python Mixin编程机制</a></li>
<li><a href="http://www.linuxjournal.com/node/4540/print">Using Mix-ins with Python</a></li>
<li><a href="http://stackoverflow.com/questions/533631/what-is-a-mixin-and-why-are-they-useful">stackoverflow - What is a mixin, and why are they useful?</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[折腾Chrome Secure Shell]]></title>
    <link href="http://tclh123.github.com/blog/2013/07/10/zhe-teng-chrome-secure-shell/"/>
    <updated>2013-07-10T01:23:00+08:00</updated>
    <id>http://tclh123.github.com/blog/2013/07/10/zhe-teng-chrome-secure-shell</id>
    <content type="html"><![CDATA[<blockquote><p>最近的觉悟是自己写代码太慢，对IDE的依赖是累积的，各种恶性循环（不足够了解语言，不熟悉项目结构）。半天憋不出几行代码，这种状态让人厌恶&#8230;以前对此持观望态度，各种纵容自己，现在发现这已经成为自己的一大瓶颈&#8230;</p></blockquote>

<p>这东西上次hack day的时候看<a href="https://github.com/atupal">
atupal</a>用过，印象蛮深。今天挖出来玩玩。</p>

<p>去<a href="https://chrome.google.com/webstore/detail/secure-shell/pnhechapfaindjhompbnflcldabbghjo?utm_source=chrome-ntp-icon">商店</a>安装的时候，提示<code>This application is not supported on this computer. Installation has been disabled.</code>，安装按钮直接变灰了。Google无果，看了下自己的Chrome版本，22&#8230;（mbp买来到现在没更过的节奏&#8230;），然后用&#8221;关于&#8221;里的自动更新报Error 12（以前也是这样所以一直没更吧..）。</p>

<h2>OS X下更新Chrome遇到Error 12</h2>

<p>试了<a href="https://support.google.com/chrome/answer/1367288?hl=en">官方</a>提供的方法，木有用。。Google出来的也大致都是删掉SoftwareUpdate然后再装一遍的意思，以及<a href="http://www.v2ex.com/t/52249">各种偏方</a>，无果。</p>

<p>然后想是不是因为现在版本太低（22->28）的缘故，最后直接把最新的<a href="https://www.google.com/intl/en/chrome/browser/">下来</a>覆盖了。后来发现完全无痛啊，因为现有的东西包括Extensions的localStorage都是放在<code>Application Support/</code>里的么。。</p>

<h2>配置Secure Shell</h2>

<p>然后很舒服地用着最新版，顺利地把Secure Shell装上了。</p>

<p>然后其实也不用什么配置是吧，输个<code>&lt;username&gt;@localhost</code>就好了。。结果报Connection refused。。用iTerm试了下<code>ssh localhost</code>同样是Connection refused（sshd服务没开的节奏&#8230;）</p>

<figure class='code'><figcaption><span>启动sshd服务</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo launchctl load -w /System/Library/LaunchDaemons/ssh.plist <span class="c"># unload是停止服务</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>查看是否启动</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo launchctl list | grep ssh
</span><span class='line'>...
</span><span class='line'>-   0   com.openssh.sshd <span class="c"># 看到这个说明成功启动了</span>
</span></code></pre></td></tr></table></div></figure>


<p>ok，现在已经可以顺利ssh到本地了。</p>

<p>另外，还可以直接授权publickey，这样就不用每次都输密码了（但是还是要输一次id_rsa私钥的密码，后面貌似shell会记住）。</p>

<figure class='code'><figcaption><span>直接把id_rsa.pub写入authorized_keys文件就行了</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys
</span></code></pre></td></tr></table></div></figure>


<h2>配置SSH root用户登陆</h2>

<p>用自己的账户登陆是ok了，但是尝试用root登陆时提示<code>Permission denied (publickey,keyboard-interactive)</code>错误。</p>

<p>先是加了/etc/sshd_config里的<code>PermitRootLogin yes</code>（开始把ssh_config跟sshd_config搞错了。。图样）。还是不行。</p>

<p>后来发现是OS X默认没有开启root用户，我输入的密码也只是<code>a valid sudoer password</code>，根本不是root的密码。</p>

<figure class='code'><figcaption><span>设置root的密码</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo passwd
</span></code></pre></td></tr></table></div></figure>


<p>之后就可以用root账户登陆了。</p>

<h2>其他</h2>

<p>Chrome Secure Shell 用起来很方便也很爽。但是我发现<code>ls</code>的时候中文目录名会乱码，中文文件内容可以正常显示。</p>

<p>还有就是不能输入中文（输入法无效。。）。</p>

<p><a href="http://git.chromium.org/gitweb/?p=chromiumos/platform/assets.git;a=tree;f=chromeapps/hterm">http://git.chromium.org/gitweb/?p=chromiumos/platform/assets.git;a=tree;f=chromeapps/hterm</a>，这个据说是前端的源码，可以拿来研究下（<a href="https://github.com/tclh123/kido">kido</a>参考）。但是clone了半天搞不下来。。= =（噗。。现在看了一下貌似死在3%了..）</p>

<h2>Reference</h2>

<ul>
<li>https://discussions.apple.com/thread/1141223?start=0&amp;tstart=0</li>
<li>http://blog.smitec.net/posts/setting-up-a-git-server-on-osx/</li>
<li>http://superuser.com/questions/555810/how-do-i-ssh-login-into-my-mac-as-root</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ImportError using Flask]]></title>
    <link href="http://tclh123.github.com/blog/2013/07/07/importerror-using-flask/"/>
    <updated>2013-07-07T15:38:00+08:00</updated>
    <id>http://tclh123.github.com/blog/2013/07/07/importerror-using-flask</id>
    <content type="html"><![CDATA[<p>巨二。</p>

<p>以后别把包名取做site，import的时候会跟python标准库里的site.py冲突。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[prevent 'Adobe Reader Updater Helper' automatic run with system on OS X]]></title>
    <link href="http://tclh123.github.com/blog/2013/07/06/os-x-jin-zhi-adobekai-ji-zi-dong-jian-cha-geng-xin/"/>
    <updated>2013-07-06T03:19:00+08:00</updated>
    <id>http://tclh123.github.com/blog/2013/07/06/os-x-jin-zhi-adobekai-ji-zi-dong-jian-cha-geng-xin</id>
    <content type="html"><![CDATA[<p>今天开机的时候发现Adobe Reader检查更新的进程自启动而且高CPU占用，不一会儿就弹出个更新提示窗口。</p>

<p>不爽之。</p>

<p>遂在 ~/Library/LaunchAgents 目录下发现 <code>com.adobe.ARM.202f4087f2bbde52e3ac2df389f53a4f123223c9cc56a8fd83a6f7ae.plist</code> 文件一枚，改后缀。。</p>

<p>文件内容是下面这样的。。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
</span><span class='line'>&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
</span><span class='line'>&lt;plist version="1.0"&gt;
</span><span class='line'>&lt;dict&gt;
</span><span class='line'>    &lt;key&gt;Label&lt;/key&gt;
</span><span class='line'>    &lt;string&gt;com.adobe.ARM.202f4087f2bbde52e3ac2df389f53a4f123223c9cc56a8fd83a6f7ae&lt;/string&gt;
</span><span class='line'>    &lt;key&gt;ProgramArguments&lt;/key&gt;
</span><span class='line'>    &lt;array&gt;
</span><span class='line'>        &lt;string&gt;/Applications/Adobe Reader.app/Contents/MacOS/Updater/Adobe Reader Updater Helper.app/Contents/MacOS/Adobe Reader Updater Helper&lt;/string&gt;
</span><span class='line'>        &lt;string&gt;semi-auto&lt;/string&gt;
</span><span class='line'>    &lt;/array&gt;
</span><span class='line'>    &lt;key&gt;RunAtLoad&lt;/key&gt;
</span><span class='line'>    &lt;true/&gt;
</span><span class='line'>    &lt;key&gt;StartInterval&lt;/key&gt;
</span><span class='line'>    &lt;integer&gt;12600&lt;/integer&gt;
</span><span class='line'>&lt;/dict&gt;
</span><span class='line'>&lt;/plist&gt;</span></code></pre></td></tr></table></div></figure>


<p>在Adobe Reader程序<a href="http://helpx.adobe.com/acrobat/kb/disable-automatic-updates-acrobat-reader.html">首选项里改</a>，也许也可以不弹出更新提示，但是不知道是否依然会有自启动的进程。</p>

<p>反正两边都弄了应该没事了~&#8230;.</p>

<h2>Update</h2>

<p>总结几个OS X潜在的自启动的地方。</p>

<ul>
<li>/Library/LaunchDaemons/</li>
<li>/Library/LaunchAgents/</li>
<li>~/Library/LaunchAgents/</li>
<li>/System/Library/StartupItems</li>
<li>/Library/StartupItems</li>
<li>GUI 的 Login Items（系统偏好，用户群组，登陆项），<em>找不到对应的文件？</em></li>
</ul>


<p>另外这两个是系统级的，</p>

<ul>
<li>/System/Library/LaunchDaemons/</li>
<li>/System/Library/LaunchAgents/</li>
</ul>


<p>Ps. 加载顺序应该是 Daemons->Agents->StartupItems（在/System/Library/LaunchDaemons/里可以找到com.apple.SystemStarter.plist，由com.apple.SystemStarter进程负责加载StartupItems）。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[About Css Preprocessor]]></title>
    <link href="http://tclh123.github.com/blog/2013/07/05/about-css-preprocessor/"/>
    <updated>2013-07-05T23:58:00+08:00</updated>
    <id>http://tclh123.github.com/blog/2013/07/05/about-css-preprocessor</id>
    <content type="html"><![CDATA[<p>在Bootstrap那里看过less，在Octopress那里看过sass。还几次搞混了。了解一下。</p>

<h2>Reference</h2>

<ul>
<li><a href="http://www.ruanyifeng.com/blog/2012/06/sass.html">SASS用法指南</a></li>
<li><a href="http://www.qianduan.net/an-introduction-to-less-and-comparison-to-sass.html">LESS介绍及其与Sass的差异</a></li>
<li><a href="http://www.bootcss.com/lesscss.html">LESS - 一种 动态 样式 语言.</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于无中心网络及本地分享、社交？]]></title>
    <link href="http://tclh123.github.com/blog/2013/07/05/guan-yu-wu-zhong-xin-wang-luo/"/>
    <updated>2013-07-05T22:11:00+08:00</updated>
    <id>http://tclh123.github.com/blog/2013/07/05/guan-yu-wu-zhong-xin-wang-luo</id>
    <content type="html"><![CDATA[<p>今天在听歌的时候，突然有点想法，如果几个朋友出去（地铁里，噪杂的酒吧，或者旅行），可以一起听一首歌（用各自的移动设备，or Glass??），就像几个人呆在一个自己的私密空间里，是不是还蛮酷？</p>

<p>自然得想到如何实现。如果是有个人充当server的方式，显然不太优美。自然地想到一个挺像的东西，AirDrop，它貌似就是个去中心的点对点网络，这种东西用来做本地的分享、社交很合适。</p>

<p>但是AirDrop现在貌似还只能用于传文件（据说是因为WiFi耗电问题没法取代蓝牙？）。这个暂不论了。</p>

<p>于是我又想到，bit网络（bit coin什么的不是很火吗）。私密社交？+移动。</p>

<p>嗯。。我觉得这方面将来肯定会产生点有意思的东西。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LEX、YACC初识]]></title>
    <link href="http://tclh123.github.com/blog/2013/06/22/lex/"/>
    <updated>2013-06-22T01:50:00+08:00</updated>
    <id>http://tclh123.github.com/blog/2013/06/22/lex</id>
    <content type="html"><![CDATA[<p>以前只用下降子程序的方法手写过一个解释器，<a href="http://iplot.tclh123.com/">iplot</a>。</p>

<p>现在学院又开一门课，叫程序分析&#8230;讲的还是编译原理&#8230;只不过是让借助工具&#8230;两个实验，一个是LEX+YACC，一个是ANTLR。</p>

<p>那咱就学下LEX+YACC&#8230;.</p>

<h2>START</h2>

<p>Lex 代表 Lexical Analyzar。Yacc 代表 Yet Another Compiler Compiler。</p>

<p>Unix或Linux都自带Lex跟YACC，我用的OS X，跟GNU/Linux下面的一样，Lex是flex，而Yacc则是bison。</p>

<h2>Lex</h2>

<p>lex和flex都是解析Lex文件的工具，用法相近，flex意为fast lexical analyzer generator。可以看成lex的升级版本。</p>

<p><strong>挖坑未填完，先把实验做掉。。</strong></p>

<h2>Reference</h2>

<p>http://blog.csdn.net/liwei_cmg/article/details/1530999</p>

<p>http://www.ibm.com/developerworks/cn/linux/sdk/lex/</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SA到底是什么]]></title>
    <link href="http://tclh123.github.com/blog/2013/06/22/sadao-di-shi-shi-yao/"/>
    <updated>2013-06-22T01:47:00+08:00</updated>
    <id>http://tclh123.github.com/blog/2013/06/22/sadao-di-shi-shi-yao</id>
    <content type="html"><![CDATA[<p><em>原谅我又拿考试复习的东西丢上来了 - -，而且这坑没填干净..</em></p>

<p><em>笔记而已，都是根据教材剖析出来的，加上一些自己的理解。</em></p>

<h2>概念</h2>

<ul>
<li>软件</li>
<li>体系结构(Architecture)= 架构</li>
<li>设计元素 = 组件 or 连接件</li>
<li>SA 包括 设计元素的描述、交互、组合的模式、模式中的约束。</li>
<li>SA = 组件+连接件+约束</li>
<li>组件，连接件应该都是集合</li>
</ul>


<h2>风格</h2>

<h3>概念</h3>

<ul>
<li>SA风格，是描述特定系统组织模式的惯用范例，强调<strong>组织模式</strong>跟<strong>惯用范例</strong></li>
</ul>


<h3>分类</h3>

<ol>
<li>数据流系统(Data Flow)，就是数据顺序流过多个组件，如 批处理序列(batch sequential)，管道和过滤器(Pipes &amp; Fliters)</li>
<li>调用返回系统(Call/Return)，这个不用解释了吧~ 如 主/子程序(main program &amp; subroutine)，面向对象系统(Object Oriented)，分层系统(layered)<em>这里把C/S归为分层，两层或三层(应用服务器)，B/S归为C/S的特例</em></li>
<li>数据中心系统(知识库，data-centered)，就是数据都放在中心节点，如 仓库(repository)，黑板(blackboard)</li>
<li>虚拟机(Virtual Machine)，可以理解成一个模拟器，如 解释器(interpreter)，基于规则系统(rule-based system)</li>
<li>独立构件(independent components)，<strong>不知道在说什么..</strong>，如 通信过程(communicating processes)，事件系统(event systems，分显式、隐式调用<strong>？</strong>)</li>
</ol>


<p>这5种风格具体就先不介绍了。。<em>感觉书上的都是老的东西，以我在这个时代的认知读起来感觉很扯。。咱尽量不八股。。</em></p>

<p>下面简单挑几个说一点，</p>

<h3>PS</h3>

<p>黑板模式，就好像多位不同的专家在同一黑板上交流思想，每个专家都可以获得别的专家写在黑板上的信息，同时也可以用自己的分析去更新黑板上的信息，从而影响其它专家。</p>

<p>解释器，用来执行其他程序的程序，不单单指通常的编程语言解释器，也可以按大的理解，如浏览器（HTML、CSS、JS），通信协议（TCP/IP，socket），甚至是处理用户输入的一些Parser也可以算（parse了之后赋予语义）。</p>

<p>管道过滤器，这个挺好理解的，而且感觉挺有意思的，以后有机会可以找个项目实现一下。记得以前搞MVC.NET的时候看过那种Fliter。</p>

<h2>建模（Modeling）</h2>

<h3>什么决定你的建模</h3>

<p>架构师跟利益相关者，进行cost/benefit权衡。</p>

<p>简单说就是客户给基本需求，架构师进行分析，做权衡。</p>

<h3>建模什么</h3>

<p>基本的架构元素(architectural elements)，</p>

<ul>
<li>Components（组件or构件）</li>
<li>Connectors（连接件）</li>
<li>Interfaces（接口）</li>
<li>Configurations（配置？结构？）</li>
<li>Rationale - reasoning behind decisions</li>
</ul>


<h3>模型的要点</h3>

<ul>
<li>无歧义</li>
<li>准确且精确
<em>PS.准确指正确，接近目标；精确指不矛盾、无歧义，击中一个地方，但不一定正确</em></li>
</ul>


<h3>视图</h3>

<p>View（视图）是一个subset-model(模型子集)，viewpoint（视点）是指关注点、标准(concern,criteria)。</p>

<p>这个学过数据库应该都知道，就是东西都放在一个模型里太复杂了，就分开放到多个视图里，每个视图只用说清楚一类事情，视图的划分由视点(viewpoint)来决定。</p>

<p>常用的viewpoints，</p>

<ul>
<li>Logical Viewpoints</li>
<li>Physical Viewpoints</li>
<li>Deployment Viewpoints</li>
<li>Concurrency Viewpoints</li>
<li>Behavioral Viewpoints</li>
</ul>


<p>比方说，用deployment做视点，那可能整个model就被分为server、client两个视图。</p>

<h3>建模方法</h3>

<h4>通常方法</h4>

<ul>
<li>自然语言</li>
<li>PowerPoint-style modeling</li>
<li>UML(the Unified Modeling Language)</li>
</ul>


<h4>其他</h4>

<ul>
<li>早期的ADL(architecture description languages)</li>
<li>Domain- and style-specific languages</li>
<li>Extensible architecture description languages</li>
</ul>


<h2>文档描述（Documenting）</h2>

<h3>用途</h3>

<p>正规的软件开发过程有很多角色参与，需要一个交流设计思想的媒介。</p>

<h2>架构设计（architecture design）</h2>

<h3>架构模式</h3>

<p><em>没提到？感觉就是架构风格（Pattern = Style）</em></p>

<h3>质量属性(Quality Attributes)</h3>

<p>系统不仅需要满足功能特性(functionality)，还需要满足其他一些质量属性(QA)。功能特性跟质量属性是正交的，功能不会决定质量。</p>

<p>达到特定质量属性，需要考虑设计、实现、部署三方面。</p>

<p>质量属性本身是没有多大用的，需要在<strong>明确</strong>质量属性（specifying QA）的过程中来帮助架构设计。</p>

<p>常见的质量属性有6种（USTAMP），</p>

<ul>
<li>Usability（易用性），方便使用</li>
<li>Security（安全性），入侵检测、入侵容忍、多机备份</li>
<li>Testability（可测试性），单元测试、错误可复现、语句覆盖度(Path Coverage?)</li>
<li>Availability（可用性），系统在任一时刻正常工作的概率</li>
<li>Modifiability（可修改性），修改指采用新的算法、数据结构、UI等</li>
<li>Performance（性能），系统响应时间，硬件资源的占用率</li>
</ul>


<p>其他，</p>

<ul>
<li>Scalability（可伸缩性）</li>
<li>Portability（可移植性）</li>
<li>etc.</li>
</ul>


<h4>质量属性场景(QAS)</h4>

<p>所以，我们就需要 质量属性场景(QA Scenarios)。在特定场景中去明确质量属性。</p>

<p>一个场景分为6部分，</p>

<ul>
<li>source</li>
<li>stimulus</li>
<li>artifact</li>
<li>environment</li>
<li>response</li>
<li>response measure</li>
</ul>


<p>一句话说，就是 刺激源，在特定环境(条件、系统模式)下，用特定刺激(n.)去刺激(v.)制品(指系统或code)，然后获得反应，最后测量（度量）反应。</p>

<p><strong>来说明系统达到这个质量属性的程度。</strong></p>

<h3>战术(Tactics)</h3>

<p>目前架构师主要工作是复用以前架构的方法（即很少凭空创造），这些方法（解决方案）大部分指 Patterns &amp; Styles，小部分指 Tactics。</p>

<p><strong>疑问，架构模式(architectural patterns)跟架构风格(styles)基本是一个意思，那架构模式跟设计模式(design patterns)又有什么区别？</strong></p>

<p>而战术（Tactics），是用来实现质量属性反应（quality attribute response）的。它是影响控制质量属性反应的设计决策。我们又称一个战术集合为一个架构策略(architectural strategy)。</p>

<p>对6个常见的质量属性（USTAMP），相应地有6个战术，</p>

<ul>
<li>Usability Tactics（易用性战术），运行时战术(runtime tactics)、设计时战术(design-time tactics，包括MVC、PAC等)<strong>?</strong></li>
<li>Security Tactics（安全性战术），抵抗攻击(resisting attacks)，检测攻击(detecting attacks)，从攻击中恢复(recovering from attacks)</li>
<li>Testability Tactics（可测试性战术），提供输入捕获输出(providing input &amp; capturing output)，内部监控(internal monitoring)</li>
<li>Availability Tactics（可用性战术），错误检测(fault detection)、错误恢复(fault recovery)、错误预防（错误阻止，fault prevention）</li>
<li>Modifiability Tactics（可修改性战术），局部修改(Localize Modifications)，防止连锁反应(Prevent Ripple Effects)，推迟绑定时间(Defer Binding Time)</li>
<li>Performance Tactics（性能战术），控制资源需求(Resource Demand)，资源管理(Resource Management)，资源仲裁(Resource Arbitration)</li>
</ul>


<h3>设计操作（Design Operators）</h3>

<p>设计操作是创建一个体系结构设计的重要设计工具。包括以下5个操作，</p>

<ul>
<li>Decomposition（分解）</li>
<li>Replication（复制，冗余）</li>
<li>compression（压缩）</li>
<li>abstraction（抽象）</li>
<li>resource sharing（资源共享）</li>
</ul>


<p><strong>？没细看</strong></p>

<h3>质量属性驱动的设计(ADD, Attribute-driven design)</h3>

<p>ADD是一步一步地系统地生成初步的体系结构设计的方法。</p>

<p>ADD的结果：全部的结构决策、内部连接和协调机制、应用模式和策略制定各部分的机制、显式达到质量属性的要求、不能详细到接口！</p>

<p>ADD输入：质量属性需求、功能需求、约束。</p>

<p>ADD步骤：
1. 确定足够的需求信息
2. 选择系统的一部分分解
3. 优先部分需求以及标识架构驱动
4. 选择满足与所选择的系统分解向关联的那部分系统的架构驱动的设计概念：模式(patterns)、风格(styles)、策略(tactics)
5. 实例化(instantiated)架构元素，分配功能性需求
6. 归并(merge)设计完成
7. 分配剩下的功能性需求
8. 定义戒口给实例化元素
9. 检查和提炼需求，使他们能约束实例化元素
10. 对于系统的下一个分解部分，重复步骤2到9</p>

<h3>架构评估</h3>

<ul>
<li>SAAM: Scenario-based Architecture Analysis Method</li>
<li>ATAM: Architecture Trade-off Analysis Method</li>
</ul>


<p>这里主要介绍 ATAM（框架权衡分析法）。</p>

<p>&#8230;</p>

<h4>效用树</h4>

<p>&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chrome Extension manifest V2]]></title>
    <link href="http://tclh123.github.com/blog/2013/06/18/chrome-extension-manifest-v2/"/>
    <updated>2013-06-18T01:28:00+08:00</updated>
    <id>http://tclh123.github.com/blog/2013/06/18/chrome-extension-manifest-v2</id>
    <content type="html"><![CDATA[<p>今天兴起想写个 Chrome Extension，研究了一番，稍有点头绪。
想到天天用的 Fawave，去找了下它<a href="http://code.google.com/p/falang/source/checkout">源码</a>（原项目名叫falang&#8230;好名字！）。</p>

<p>不看不知道，一看发现它逻辑这么复杂。。而且光看popup.html我就头大了。。
那个神一样模版语言（<code>&lt;?js ... ?&gt;...#{...}...</code>）。。见都没见过。</p>

<p>搞半天弄清楚他用的是<a href="http://www.kuwata-lab.com/tenjin/jstenjin-users-guide.html">shotenjin.js</a>，是tenjin.js的子集，用于client-side。略小众啊，都搜不到什么相关信息。不过超轻量，整个就100多行代码，用法也真心简单。</p>

<p>又看了半天源码，似乎摸清楚几个困惑的点，</p>

<ul>
<li>chrome extension 的 popup.html 不支持持久化，每次点一下相当于要重新载入</li>
<li>像我这种比较小的需求，应该就是每次载入都从localStorage里拿数据出来更新DOM</li>
<li>fawave那些timeline用localStorage肯定放不下的，貌似是利用 background.html 来做本地缓存（cache。写得好像很吊，就看了一点）。</li>
</ul>


<p>总结一下，其实上面几个点就是纠结 popup.html 里的数据的持久化。</p>

<p>墨迹完了~~</p>

<h2>真正跟标题相关的内容</h2>

<p>fawave用的是manifest V1，我用的V2。于是我用shotenjin.js来解析模版就出现了问题。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Uncaught Error: Code generation from strings disallowed for this context</span></code></pre></td></tr></table></div></figure>


<p>经过一番搜索。。。发现是V2不再支持eval()，而shotenjin.js里必须用了eval()啊。。。</p>

<p>具体解决方法参照，</p>

<p><a href="http://www.360marks.com/?p=375">Chrome extension 升级到 manifest version 2 的问题</a></p>

<p><a href="http://developer.chrome.com/trunk/extensions/sandboxingEval.html">Using eval in Chrome Extensions. Safely.</a></p>

<p>因为不想换模版引擎，我用的是官方给的方法，用一个sandbox 的iframe，来代替进行eval()。。</p>

<p>但是。。仍然有问题（好吧这个问题证明是我是小白），简单说就是我想在popup.html load的时候就进行模版渲染，但是那个时候iframe里的script还没执行，message事件还没注册。。</p>

<p>解决方法是，</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$('sandbox').onload = function() {
</span><span class='line'>    init();
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>这样保证 init（给iframe发消息让它渲染模版）时， iframe 已经 load，就行了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Open Terminal(iTerm2) in Current Folder]]></title>
    <link href="http://tclh123.github.com/blog/2013/06/14/open-terminal-iterm2-in-current-folder/"/>
    <updated>2013-06-14T15:58:00+08:00</updated>
    <id>http://tclh123.github.com/blog/2013/06/14/open-terminal-iterm2-in-current-folder</id>
    <content type="html"><![CDATA[<p>原来Terminal一直用自带的，现在改成iTerm2。
google到一些<a href="http://www.dbform.com/html/2011/1559.html">用AppleScript解决的方案</a>，经测试不可用，估计是OS X 10.8改了什么东西。
没空研究AppleScript&#8230;</p>

<p>然后意识到也许可以把Go2Shell的默认Terminal改一下，然后确实google到了方法。。</p>

<h2>Solution</h2>

<ol>
<li>Download Go2Shell.</li>
<li>Change your default Go2Shell terminal to iTerm2.</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>open -a Go2Shell --args config
</span></code></pre></td></tr></table></div></figure>


<p>That will open the configuration screen.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Core Java 2 读书笔记（一）]]></title>
    <link href="http://tclh123.github.com/blog/2013/05/13/core-java-2-du-shu-bi-ji-%28%5B%3F%5D-%29/"/>
    <updated>2013-05-13T22:51:00+08:00</updated>
    <id>http://tclh123.github.com/blog/2013/05/13/core-java-2-du-shu-bi-ji-([?]-)</id>
    <content type="html"><![CDATA[<p>我不会说我是因为明天考Java才开始看的。</p>

<p>鉴于记性实在太差，觉得以后每系统地学一个新的东西都要做一点笔记。。留给以后回忆用。。（“青春就是用来回忆的&#8230;”</p>

<p>从第三章开始看的，看到第六章。</p>

<h2>数据类型</h2>

<ul>
<li>基本类型，八种，int/short/long/byte，float/double，char，boolean</li>
<li>对象，都集成于Object类</li>
</ul>


<p>ps. 没有unsigned类型，于是我就想&#8230;表示pixel的话，只能用-128~127的byte了&#8230;</p>

<h2>赋值与初始化</h2>

<p>Java中只有声明（没有类似C/C++的定义一说，声明的同时可以初始化变量）。</p>

<h2>常量</h2>

<p>用final修饰（const虽然为保留字，但目前还未定义）</p>

<h2>操作符</h2>

<p>有一种<code>&gt;&gt;&gt;</code>操作符，表示逻辑右移，<code>&gt;&gt;</code>是算术右移。</p>

<h2>字符串equals</h2>

<p>要使用<code>equals</code>来进行String的比较（覆盖了Object的equals），<code>==</code>只能判断两个串是否储存在同一位置。</p>

<h2>格式化输出</h2>

<p>可以用<code>System.out.printf()</code>，类似C的printf。</p>

<p><em>ps.不知道为什么书上介绍的是Format.printf()</em></p>

<h2>循环、分支</h2>

<p><code>switch</code>语句的<code>case</code>标签必须是整数。</p>

<p><code>break</code>还有一种带标签的break语句，用于跳出多层循环。</p>

<h2>大数字</h2>

<p>BigInterger、BigDecimal，有add、subtract、multiply、divide、mod等方法。
用valueOf静态方法来转成大数字。</p>

<p>Java跟C++不同，程序员无法重载操作符。</p>

<h2>数组</h2>

<p><code>int[] a;</code>跟<code>int a[];</code>都可以用来声明数组。</p>

<p><code>System.arraycopy(from, fromIndex, to, toIndex, count)</code>可以用来拷贝数组中的元素。</p>

<p><code>Arrays.sort(a)</code>可以对数组排序。
<em>ps.开始我奇怪怎么没有类似的cmp函数，原来是在Comparable接口中定义了</em></p>

<h2>Conclusion</h2>

<p>四五六章后面几篇再写。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sublime text 2 build system for OSX]]></title>
    <link href="http://tclh123.github.com/blog/2013/05/12/sublime-text-2-build-system-for-osx/"/>
    <updated>2013-05-12T23:15:00+08:00</updated>
    <id>http://tclh123.github.com/blog/2013/05/12/sublime-text-2-build-system-for-osx</id>
    <content type="html"><![CDATA[<h2>Cpp</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;cmd&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;bash&quot;</span><span class="p">,</span> <span class="s2">&quot;-c&quot;</span><span class="p">,</span> <span class="s2">&quot;g++ &#39;${file}&#39; -o &#39;${file_path}/${file_base_name}&#39; &amp;&amp; open &#39;${file_path}/${file_base_name}&#39;&quot;</span><span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;file_regex&quot;</span><span class="p">:</span> <span class="s2">&quot;^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;working_dir&quot;</span><span class="p">:</span> <span class="s2">&quot;${file_path}&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;selector&quot;</span><span class="p">:</span> <span class="s2">&quot;source.c, source.c++&quot;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&quot;variants&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Run&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;cmd&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;bash&quot;</span><span class="p">,</span> <span class="s2">&quot;-c&quot;</span><span class="p">,</span> <span class="s2">&quot;g++ &#39;${file}&#39; -o &#39;${file_path}/${file_base_name}&#39; &amp;&amp; &#39;${file_path}/${file_base_name}&#39;&lt;&#39;${file_path}/${file_base_name}.in&#39;&gt;&#39;${file_path}/${file_base_name}.out&#39;&quot;</span><span class="p">]</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Python</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;cmd&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;bash&quot;</span><span class="p">,</span> <span class="s2">&quot;-c&quot;</span><span class="p">,</span> <span class="s2">&quot;python -u &#39;${file}&#39; &amp;&amp; chmod a+x &#39;${file}&#39; &amp;&amp; open -a terminal &#39;${file}&#39;&quot;</span><span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;selector&quot;</span><span class="p">:</span> <span class="s2">&quot;source.python&quot;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&quot;variants&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Run&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;cmd&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;bash&quot;</span><span class="p">,</span> <span class="s2">&quot;-c&quot;</span><span class="p">,</span> <span class="s2">&quot;python -u &#39;${file}&#39; &amp;&amp; chmod a+x &#39;${file}&#39; &amp;&amp; &#39;${file}&#39;&lt;&#39;${file_path}/${file_base_name}.in&#39;&gt;&#39;${file_path}/${file_base_name}.out&#39;&quot;</span><span class="p">]</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Java</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;cmd&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;bash&quot;</span><span class="p">,</span> <span class="s2">&quot;-c&quot;</span><span class="p">,</span> <span class="s2">&quot;javac &#39;${file}&#39; &amp;&amp; java &#39;${file_base_name}&#39;&quot;</span><span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;file_regex&quot;</span><span class="p">:</span> <span class="s2">&quot;^(...*?):([0-9]*):?([0-9]*)&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;selector&quot;</span><span class="p">:</span> <span class="s2">&quot;source.java, source.java&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>For cpp &amp; python, the build-system can open a new terminal window, so I can interact(ep. input) with my program easily.</p>

<p>For java, I don&#8217;t know how to do that, only can show the outputs yet.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[想做的东西]]></title>
    <link href="http://tclh123.github.com/blog/2013/05/12/xiang-zuo-de-dong-xi/"/>
    <updated>2013-05-12T19:53:00+08:00</updated>
    <id>http://tclh123.github.com/blog/2013/05/12/xiang-zuo-de-dong-xi</id>
    <content type="html"><![CDATA[<ul>
<li>一个TODO</li>
<li>个人网站</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[javac terminal utf-8 encoding]]></title>
    <link href="http://tclh123.github.com/blog/2013/05/12/javac-terminal-utf-8-encoding/"/>
    <updated>2013-05-12T19:38:00+08:00</updated>
    <id>http://tclh123.github.com/blog/2013/05/12/javac-terminal-utf-8-encoding</id>
    <content type="html"><![CDATA[<p>OS X 的terminal输出信息是utf-8编码的，</p>

<p>但是javac默认输出GBK，会导致乱码。</p>

<p>可以用<code>javac -J-Dfile.encoding=UTF-8</code>来使其输出utf-8编码的信息。</p>

<p>解决方案:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo "alias javac='javac -J-Dfile.encoding=UTF-8 '"&gt;&gt;~/.bash_profile</span></code></pre></td></tr></table></div></figure>


<h3>Reference</h3>

<p><a href="https://www.surfchen.org/archives/710">解决javac和java命令在Mac OSX终端里的乱码问题</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime Text 2 使用中文路径]]></title>
    <link href="http://tclh123.github.com/blog/2013/05/08/sublime-text-2-shi-yong-zhong-wen-lu-jing/"/>
    <updated>2013-05-08T17:07:00+08:00</updated>
    <id>http://tclh123.github.com/blog/2013/05/08/sublime-text-2-shi-yong-zhong-wen-lu-jing</id>
    <content type="html"><![CDATA[<p>文件是中文路径的话，使用build system不能正常工作。</p>

<p>解决方法：</p>

<p>在OS X上，</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>subl /Applications/Sublime\ Text\ 2.app/Contents/MacOS/sublime_plugin.py</span></code></pre></td></tr></table></div></figure>


<p>在文件末尾添加两行代码，</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>reload(sys) 
</span><span class='line'>sys.setdefaultencoding('utf-8')</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[各种排序算法]]></title>
    <link href="http://tclh123.github.com/blog/2013/05/04/ge-chong-pai-xu-suan-fa/"/>
    <updated>2013-05-04T15:31:00+08:00</updated>
    <id>http://tclh123.github.com/blog/2013/05/04/ge-chong-pai-xu-suan-fa</id>
    <content type="html"><![CDATA[<p>这篇东西其实是当时为了找实习而复习排序弄的，面试官无聊就喜欢问你个排序，如果你连插入排序跟选择排序都分不清楚的话还是别去找虐了。</p>

<h2>几种排序</h2>

<p>大致按算法难度、类型从上到下排。</p>

<p><em>算法描述都按升序排序，复杂度都指平均复杂度。</em></p>

<ul>
<li><p>冒泡排序</p>

<p>  模拟<strong>气泡</strong>浮上来的过程，n-1趟float，时间复杂度O( n<sup>2</sup> )</p></li>
<li><p>选择排序，一般指简单选择排序</p>

<p>  每次在无序区中<strong>选择</strong>出最大的元素，然后放到有序区跟无序区间，n-1趟，时间复杂度O( n<sup>2</sup> )</p></li>
<li><p>插入排序，一般指直接插入排序，还有折半插入排序、2-路插入排序、表插入排序等</p>

<p>  本质：元素插入到有序列。</p>

<p>  左边有序区，右边无序区（待排），每次将无序区最左边的元素<strong>插入</strong>到有序区中合适的位置（故涉及到元素的右移），n-1次，时间复杂度O( n<sup>2</sup> )</p></li>
<li><p>希尔排序，对直接插入排序的改进</p>

<p>  简单来说，就是取不同步长，进行多次插入排序，最后步长为1，就是以此直接插入排序。重点在于步长的选择，原始版本步长为n/( 2<sup>i</sup> )，最坏复杂度O( n<sup>2</sup> )。现在最好的步长可以达到O( n(logn)<sup>2</sup> )，仅次于O(nlogn)的排序。</p>

<p>  <a href="http://zh.wikipedia.org/wiki/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F">可以想象成取不同的行宽，按列进行插入排序。</a></p>

<p>  当刚开始元素很无序的时候，步长最大，所以插入排序的元素个数很少，速度很快；当元素基本有序了，步长很小，插入排序对于有序的序列效率很高。</p></li>
<li><p>基数排序</p>

<p>  这篇文章的唯一一个非比较型排序算法。基数（Radix），即数的进制。之所以能够不进行比较，是因为它按数位将数分配到Radix个桶中，再顺序进行收集。</p>

<p>  有LSD（Least significant digital）、MSD（Most significant digital）两种方式。需要进行k(数据中最大位数)趟，每趟分配要O(n)，收集要O(radix)，所以总复杂度O(k(n+radix))。</p></li>
<li><p>归并排序，一般指2-路归并排序，还有非递归归并排序、自然归并排序等。</p>

<p>  本质：分治，有序列合并。</p>

<p>  二分需要O(logn)，合并需要O(n)，总时间复杂度O(nlogn)。需要O(n)的额外空间，用于存放合并有序列的临时结果。</p></li>
<li><p>快速排序</p>

<p>  本质：分治，Patition。</p>

<p>  难点在于Patition，要做到O(n)的时间复杂度。简单来说，就是选最左边的作为pivot，并维护值，然后两个指针，从右往左扫，从左往右扫，遇到不合适的，则换到另一边。直到两个指针相遇。</p>

<p>  总平均时间复杂度O(nlogn)。</p></li>
<li><p>堆排序</p>

<p>  本质：堆（分治）</p>

<p>  升序排列的话需要借助大顶堆，涉及max_heapify、sift_down两个子操作。其中sift_down类似直接插入排序中的数组右移。</p>

<p>  其实说白了就是二叉堆上的插入排序。</p></li>
</ul>


<h3>归类</h3>

<p>冒泡、选择、插入，都可以认为是将元素划分为有序区、无序区，都要n-1趟处理（无序区拓展到有序区），时间复杂度都是O( n<sup>2</sup> )。</p>

<p>希尔，实现起来很简单，采用最佳步长的话，复杂度可以达到O( n(logn)<sup>2</sup> )，仅次于O(nlogn)的排序。而且插入排序在元素基本有序的情况下时间复杂度接近O(n)。在一些情况下还是很有优势的。</p>

<p>基数，非比较型排序算法，类似的还有桶排序等。在数据有一定限制（比如都在0~1000间），数据量很大（比较型算法最快也要O(nlogn)）的情况下，可以考虑非比较型算法，可以O(n)完成。</p>

<p>归并、快速、堆排，都应用了分治思想，平均复杂度都是O(nlogn)。这也是基于比较的排序算法的极限了。</p>

<h2>具体实现</h2>

<p>我希望用最简洁的代码实现算法。</p>

<p>因为面试一般不让写伪代码，而且是在纸上写，所以我就不用宏定义写得标准一点了。</p>

<p><em>Ps. 我原来写swap是这样写，<code>inline int swap(int &amp;x, int &amp;y) { x^=y; y^=x; x^=y; }</code>，结果被坑了，why？试想x、y地址一样的话&#8230;</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstring&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;list&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="kr">inline</span> <span class="kt">int</span> <span class="n">swap</span><span class="p">(</span><span class="kt">int</span> <span class="o">&amp;</span><span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="o">&amp;</span><span class="n">y</span><span class="p">)</span> <span class="p">{</span> <span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span> <span class="n">x</span> <span class="o">=</span> <span class="n">y</span><span class="p">;</span> <span class="n">y</span> <span class="o">=</span> <span class="n">t</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="kr">inline</span> <span class="kt">int</span> <span class="n">max</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">(</span><span class="n">x</span><span class="o">&gt;</span><span class="n">y</span><span class="p">)</span><span class="o">?</span> <span class="nl">x:</span> <span class="n">y</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="kr">inline</span> <span class="kt">int</span> <span class="n">min</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">(</span><span class="n">x</span><span class="o">&lt;</span><span class="n">y</span><span class="p">)</span><span class="o">?</span> <span class="nl">x:</span> <span class="n">y</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="cp">#define bug(s) cout&lt;&lt;#s&lt;&lt;&quot;=&quot;&lt;&lt;s&lt;&lt;&quot; &quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 冒泡，O(n^2)</span>
</span><span class='line'><span class="kt">void</span> <span class="n">bubble_sort</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">k</span><span class="o">&lt;</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="n">k</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&gt;</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>                <span class="n">swap</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 简单选择，O(n^2)</span>
</span><span class='line'><span class="kt">void</span> <span class="n">selection_sort</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">k</span><span class="o">&lt;</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">maxi</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">-</span><span class="n">k</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">maxi</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>                <span class="n">maxi</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">swap</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">maxi</span><span class="p">],</span> <span class="n">a</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="n">k</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 直接插入，O(n^2)</span>
</span><span class='line'><span class="kt">void</span> <span class="n">insert_sort</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">j</span><span class="o">&gt;=</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">&gt;</span><span class="n">t</span><span class="p">;</span> <span class="n">j</span><span class="o">--</span><span class="p">)</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>        <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">t</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 希尔，O(n^2)</span>
</span><span class='line'><span class="kt">void</span> <span class="n">shell_sort</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">gap</span> <span class="o">=</span> <span class="n">n</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span> <span class="n">gap</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">;</span> <span class="n">gap</span><span class="o">/=</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">gap</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>            <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">-</span><span class="n">gap</span><span class="p">;</span> <span class="n">j</span><span class="o">&gt;=</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">&gt;</span><span class="n">t</span><span class="p">;</span> <span class="n">j</span><span class="o">-=</span><span class="n">gap</span><span class="p">)</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="n">gap</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>            <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="n">gap</span><span class="p">]</span> <span class="o">=</span> <span class="n">t</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 基数，O(k*(n+r))，假设radix=10, k=5</span>
</span><span class='line'><span class="kt">void</span> <span class="n">radix_sort</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">list</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">l</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">e</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">k</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">,</span> <span class="n">e</span><span class="o">*=</span><span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">l</span><span class="p">[</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">/</span><span class="n">e</span><span class="o">%</span><span class="mi">10</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">m</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">r</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">l</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">a</span><span class="p">[</span><span class="n">m</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">l</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">front</span><span class="p">();</span>
</span><span class='line'>                <span class="n">l</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">pop_front</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 归并，O(nlog(n))</span>
</span><span class='line'><span class="kt">void</span> <span class="n">merge</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">mid</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">,</span> <span class="kt">int</span> <span class="o">*</span><span class="n">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="n">l</span><span class="p">,</span> <span class="n">j</span><span class="o">=</span><span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">mid</span> <span class="o">&amp;&amp;</span> <span class="n">j</span><span class="o">&lt;=</span><span class="n">r</span><span class="p">;)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&lt;</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">])</span> <span class="n">t</span><span class="p">[</span><span class="n">c</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">];</span>
</span><span class='line'>        <span class="k">else</span> <span class="n">t</span><span class="p">[</span><span class="n">c</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="o">++</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">mid</span><span class="p">)</span> <span class="n">t</span><span class="p">[</span><span class="n">c</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">];</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">j</span><span class="o">&lt;=</span><span class="n">r</span><span class="p">)</span> <span class="n">t</span><span class="p">[</span><span class="n">c</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="o">++</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">c</span><span class="o">&lt;</span><span class="n">r</span><span class="o">-</span><span class="n">l</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="n">c</span><span class="o">++</span><span class="p">)</span> <span class="n">a</span><span class="p">[</span><span class="n">l</span><span class="o">+</span><span class="n">c</span><span class="p">]</span> <span class="o">=</span> <span class="n">t</span><span class="p">[</span><span class="n">c</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">void</span> <span class="n">m_sort</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">,</span> <span class="kt">int</span> <span class="o">*</span><span class="n">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">l</span><span class="o">&lt;</span><span class="n">r</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">l</span><span class="o">+</span><span class="n">r</span><span class="p">)</span><span class="o">&gt;&gt;</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="n">m_sort</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">mid</span><span class="p">,</span> <span class="n">t</span><span class="p">);</span>
</span><span class='line'>        <span class="n">m_sort</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">t</span><span class="p">);</span>
</span><span class='line'>        <span class="n">merge</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">mid</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">t</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">void</span> <span class="n">merge_sort</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="o">*</span><span class="n">t</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="o">*</span><span class="n">n</span><span class="p">);</span>   <span class="c1">// 统一用一个临时空间</span>
</span><span class='line'>    <span class="n">m_sort</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">t</span><span class="p">);</span>
</span><span class='line'>    <span class="n">free</span><span class="p">(</span><span class="n">t</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 快速排序，O(nlogn)</span>
</span><span class='line'><span class="kt">int</span> <span class="n">patition</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">l</span><span class="p">];</span>   <span class="c1">//pivot</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">l</span><span class="o">&lt;</span><span class="n">r</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">while</span><span class="p">(</span><span class="n">l</span><span class="o">&lt;</span><span class="n">r</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="p">[</span><span class="n">r</span><span class="p">]</span><span class="o">&gt;=</span><span class="n">t</span><span class="p">)</span> <span class="n">r</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>        <span class="n">a</span><span class="p">[</span><span class="n">l</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">r</span><span class="p">];</span>
</span><span class='line'>        <span class="k">while</span><span class="p">(</span><span class="n">l</span><span class="o">&lt;</span><span class="n">r</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="p">[</span><span class="n">l</span><span class="p">]</span><span class="o">&lt;=</span><span class="n">t</span><span class="p">)</span> <span class="n">l</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="n">a</span><span class="p">[</span><span class="n">r</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">l</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">a</span><span class="p">[</span><span class="n">l</span><span class="p">]</span> <span class="o">=</span> <span class="n">t</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">l</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">void</span> <span class="n">q_sort</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">l</span><span class="o">&lt;</span><span class="n">r</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">q</span> <span class="o">=</span> <span class="n">patition</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span><span class='line'>        <span class="n">q_sort</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">q</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="n">q_sort</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">q</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">void</span> <span class="n">quick_sort</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">q_sort</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 堆排序，O(nlogn)</span>
</span><span class='line'><span class="cp">#define lson(e) (e)&lt;&lt;1|1</span>
</span><span class='line'><span class="kt">void</span> <span class="n">sift_down</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">int</span> <span class="n">i</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// 类似直接插入排序的sift</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">lson</span><span class="p">(</span><span class="n">i</span><span class="p">);</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">=</span><span class="n">j</span><span class="p">,</span> <span class="n">j</span><span class="o">=</span><span class="n">lson</span><span class="p">(</span><span class="n">i</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">&lt;</span><span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">&lt;</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span> <span class="n">j</span><span class="o">++</span><span class="p">;</span>   <span class="c1">// 取较大的节点</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">t</span><span class="o">&gt;</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">])</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">t</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">void</span> <span class="n">max_heapify</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">n</span><span class="o">/</span><span class="mi">2</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">sift_down</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">void</span> <span class="n">heap_sort</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">max_heapify</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&gt;=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">swap</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>        <span class="n">sift_down</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">5</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">15</span><span class="p">};</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">a</span><span class="p">)</span><span class="o">/</span><span class="k">sizeof</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>    <span class="c1">// bubble_sort(a, n);</span>
</span><span class='line'>    <span class="c1">// selection_sort(a, n);</span>
</span><span class='line'>    <span class="c1">// insert_sort(a, n);</span>
</span><span class='line'>    <span class="c1">// shell_sort(a, n);</span>
</span><span class='line'>    <span class="c1">// radix_sort(a, n);</span>
</span><span class='line'>    <span class="c1">// merge_sort(a, n);</span>
</span><span class='line'>    <span class="c1">// quick_sort(a, n);</span>
</span><span class='line'>    <span class="n">heap_sort</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d &quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// 1 3 4 5 6 8 9 15 16</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Prolog语言]]></title>
    <link href="http://tclh123.github.com/blog/2013/05/02/prologyu-yan/"/>
    <updated>2013-05-02T17:11:00+08:00</updated>
    <id>http://tclh123.github.com/blog/2013/05/02/prologyu-yan</id>
    <content type="html"><![CDATA[<p><em>Not Finished yet</em></p>

<p>选了个人工智能的选修，教的是prolog（为啥不教lisp..）</p>

<p>prolog好老了，看了下介绍，貌似是种描述型语言，不带流程控制，依靠数据间的关系（逻辑），自动进行推理（所谓智能）。</p>

<h2>语言基本内容</h2>

<h3>项</h3>

<p><img src="MyImage/prolog_1.png" alt="" /></p>

<h3>语句</h3>

<p>只有三种语句，事实、规则、问题（目标）。
语句都要用点(.)结束。</p>

<p>基本就是离散数学里的数理逻辑部分那个意思，前提、产生式、结论。</p>

<blockquote><p>Prolog语言是一种以一阶谓词为基础的逻辑性语言（Programming in logic）。</p></blockquote>

<p>从命题逻辑，到谓词逻辑（加入谓词、量词）形成一阶逻辑系统。回想了下，数理逻辑好像很厉害的样子，不过学完了也记不得多少理论的东西了&#8230;</p>

<h4>事实</h4>

<p>格式：P. （P表示一个谓词公式，即&lt;谓词名>(&lt;项表>)）
含义：无条件成立，恒为真
eg. like(monkey, banana)</p>

<h4>规则</h4>

<p>格式：P :- P1, P2, &#8230;, Pn. （:- 表示 蕴含，即->，,表示 合取/与，及<sup>）</sup>
含义：若P1, &#8230;,Pn均为真，P为真</p>

<h4>问题（目标）</h4>

<p>格式：Q1,Q2,&#8230;Qm.
含义：待回答的问题，即Q1,&#8230;Qm同时为真吗？</p>

<h3>表</h3>

<h3>谓词</h3>

<h2>后续</h2>

<p>Ps.由于课没去过几次，今天看ppt发现课上讲的是Turbo Prolog（呵呵..我说咋差这么大呢），<a href="http://en.wikipedia.org/wiki/Prolog#Related_languages">Wiki</a>上说</p>

<blockquote><p>Visual Prolog, formerly known as PDC Prolog and Turbo Prolog, is a strongly typed object-oriented dialect of Prolog, which is very different from standard Prolog. As Turbo Prolog it was marketed by Borland, but it is now developed and marketed by the Danish firm PDC (Prolog Development Center) that originally produced it.</p></blockquote>

<p>Prolog好几种方言啊，咱还是用GNU吧（找到个<a href="http://sourceforge.net/projects/xgp/">for OS X的IDE</a>）。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[你在为自己战斗]]></title>
    <link href="http://tclh123.github.com/blog/2013/03/03/hey-man/"/>
    <updated>2013-03-03T00:56:00+08:00</updated>
    <id>http://tclh123.github.com/blog/2013/03/03/hey-man</id>
    <content type="html"><![CDATA[<pre>
你懂么？
没什么好愧疚的，你只是在为自己战斗而已。
总会受伤。
你会继续前进，
因为你是在为自己战斗。

唯心主义，
你只相信你所感受到的。
所以你的心情能决定一切。
这种人是能无敌，
还是走向毁灭，
一念之间而已。

你真是个奇葩。
哦，这我已经习惯了。

没事，
你只要学会控制你的情绪就可以了。
而关键在于，
你要放下压力。
压力源于何处？
绝对不是来自本身，而是别人。
所以你应该放下你所承担的，
别人要求的，或是自己认为的。

没有压力，没有畏惧，你便无敌。

也许这是对的。
你只需在心中默念，
输也是我，
赢也是我，
我有什么好怕的。
我是我，
里外保持一致的我，
各种维度一致的我。

人应当这样纯粹。

. . .

你不懂我在说什么？
其实我也不懂。。。

</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2012微软编程之美全国挑战赛回顾]]></title>
    <link href="http://tclh123.github.com/blog/2013/02/28/2012wei-ruan-bian-cheng-zhi-mei-quan-guo-tiao-zhan-sai-hui-gu/"/>
    <updated>2013-02-28T10:15:00+08:00</updated>
    <id>http://tclh123.github.com/blog/2013/02/28/2012wei-ruan-bian-cheng-zhi-mei-quan-guo-tiao-zhan-sai-hui-gu</id>
    <content type="html"><![CDATA[<p>今天MSTC的人突然说要采访往届参赛选手，囧，都过去快一年了，回忆下。。</p>

<p>2012编程之美是MSRA举办的，分为初赛跟决赛。
初赛比的是AI对战，北航的MSTC做的海战游戏并提供了3种不同语言的SDK，海选，网上提交代码。
决赛取64名，地点在北京海淀的微软大厦，比的是工程类题目，解决问题，Topic是“大数据可视化”，形式是结对编程，2天时间。当时是3个题目任选，我选的是“字云”。决赛没比好，时间不够，没入围10强。</p>

<p>要说比赛让我收获了什么：</p>

<ul>
<li>初赛是写AI，以前完全没接触过的东西。涉及到一些状态机理论，计算几何，数学建模（根据各种伤害公式等），以求得到一个最优化的AI策略。还是非常有意思的。</li>
<li>决赛是“大数据可视化”，当时我们是用C#/WPF写（其实当时真是各种不会，现在再考虑这个问题脑中蹦出的解决方案就多很多了），本来是想用Siverlight（我当时技术特征纯MS&#8230;）因为什么东西卡住又换到WPF了。除去通过工程技术方面的摸索得到的收获，还有两点是我比较重视的。一个是“结对编程”，引入了Team Work的因素，锻炼了与人交流、项目分工等等的能力。那种背靠背相互依赖的感觉真的让人很享受。另一个就是“马拉松式”的编程，只给我们2天时间（其实除去吃饭睡觉时间远远不到，大概就2x8小时），那种紧张感，抓到一个想法就拼命coding，很迷人。。（其实我喜欢ACM也有这部分原因，可以高频率敲击键盘。。）</li>
</ul>


<p>。。。就这样吧，最后放上一张图，在那个什么Sky Garden拍的，话说微软的楼确实不错。。
<img src="MyImage/bianchengzhimei.jpeg" alt="编程之美北京" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim学习笔记（四）- 插件篇]]></title>
    <link href="http://tclh123.github.com/blog/2013/01/30/vimxue-xi-bi-ji-%28si-%29-cha-jian-pian/"/>
    <updated>2013-01-30T01:02:00+08:00</updated>
    <id>http://tclh123.github.com/blog/2013/01/30/vimxue-xi-bi-ji-(si-)-cha-jian-pian</id>
    <content type="html"><![CDATA[<p>主要是根据前辈的一篇博文，<a href="http://www.cnblogs.com/chijianqiang/archive/2012/11/06/vim-3.html">谁说Vim不是IDE？（三）</a>写的，自己实践整理的一个记录。</p>

<p>下一步计划是消化这两篇：</p>

<p>1.<a href="http://www.cnblogs.com/chijianqiang/archive/2012/12/17/vim-4.html">谁说Vim不是IDE？（四）</a></p>

<p>2.<a href="https://github.com/humiaozuzu/dot-vimrc">Maple&#8217;s Vim config</a></p>

<p>先是熟悉ctags，然后把vim搞成IDE，完善自己的.vimrc。</p>

<h2>pathogen</h2>

<hr />

<p>通过管理<code>runtimepath</code>来简化插件安装、运行时的文件，使其能位于自己自定义目录（默认为 bundle）下。</p>

<p>项目位于<a href="https://github.com/tpope/vim-pathogen">github</a></p>

<h3>插件安装</h3>

<h4>1、执行</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir -p ~/.vim/autoload ~/.vim/bundle; <span class="se">\</span>
</span><span class='line'>curl -Sso ~/.vim/autoload/pathogen.vim <span class="se">\</span>
</span><span class='line'>    https://raw.github.com/tpope/vim-pathogen/master/autoload/pathogen.vim
</span></code></pre></td></tr></table></div></figure>


<h4>2、在 .vimrc 中增加代码</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">call</span> pathogen#infect<span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Command-T</h2>

<hr />

<p>用于在一个给定目录下快速定位文件，Go To File的功能。</p>

<h3>插件安装</h3>

<h4>1、下载</h4>

<p><a href="http://www.vim.org/scripts/download_script.php?src_id=18167">command-t-1.4.vba</a></p>

<h4>2、安装至bundle目录下</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir ~/.vim/bundle/command-t
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vim <span class="nb">command</span>-t-1.4.vba
</span></code></pre></td></tr></table></div></figure>


<p>执行 <code>:UseVimball ~/.vim/bundle/command-t</code></p>

<h4>3、编译C扩展</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> ~/.vim/bundle/command-t/ruby/command-t
</span><span class='line'>ruby extconf.rb
</span><span class='line'>make
</span></code></pre></td></tr></table></div></figure>


<h2>Powerline</h2>

<hr />

<p>一个增强的窗口状态栏。</p>

<h3>插件安装</h3>

<h4>1、安装到bundle</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> ~/.vim/bundle
</span><span class='line'>git clone git://github.com/Lokaltog/vim-powerline.git
</span></code></pre></td></tr></table></div></figure>


<h4>2、安装字体</h4>

<p>安装一些 <a href="https://gist.github.com/1595572">vim-powerline patched fonts</a>，我用的是Menlo，然后安装到系统</p>

<h4>3、在.vimrc中设置状态栏主题</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot;powerline{</span>
</span><span class='line'><span class="c">&quot;set guifont=PowerlineSymbols\ for\ Powerline</span>
</span><span class='line'><span class="k">set</span> <span class="nb">guifont</span><span class="p">=</span>Menlo\ <span class="k">for</span>\ Powerline
</span><span class='line'><span class="k">set</span> <span class="nb">nocompatible</span>
</span><span class='line'><span class="k">set</span> <span class="nb">t_Co</span><span class="p">=</span><span class="m">256</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:Powerline_symbols <span class="p">=</span> <span class="s1">&#39;fancy&#39;</span>
</span><span class='line'><span class="c">&quot;}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
