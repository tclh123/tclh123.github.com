<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tclh123's 3rd Blog]]></title>
  <link href="http://tclh123.github.com/atom.xml" rel="self"/>
  <link href="http://tclh123.github.com/"/>
  <updated>2013-12-15T22:45:29+08:00</updated>
  <id>http://tclh123.github.com/</id>
  <author>
    <name><![CDATA[tclh123]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[vim saving of files as sudo]]></title>
    <link href="http://tclh123.github.com/blog/2013/12/15/vim-saving-of-files-as-sudo/"/>
    <updated>2013-12-15T22:40:00+08:00</updated>
    <id>http://tclh123.github.com/blog/2013/12/15/vim-saving-of-files-as-sudo</id>
    <content type="html"><![CDATA[<h2>Understanding <code>:w !sudo tee %</code></h2>

<p><strong>Following is copied from Andrew Marshall&#8217;s answer on <a href="http://stackoverflow.com/questions/2600783/how-does-the-vim-write-with-sudo-trick-work/7078429#7078429">StackOverflow</a>.</strong></p>

<h3>% means &#8220;the current file&#8221;</h3>

<p>As eugene y pointed out, % does indeed mean &#8220;the current file name&#8221;. Another use for this in Vim is in substitution commands. For example, :%s/foo/bar means &#8220;in the current file, replace occurrences of foo with bar.&#8221; If you highlight some text before typing :s, you&#8217;ll see that the highlighted lines take the place of % as your substitution range.</p>

<h3>:w isn&#8217;t updating your file</h3>

<p>One confusing part of this trick is that you might think :w is modifying your file, but it isn&#8217;t. If you opened and modified file1.txt, then ran :w file2.txt, it would be a &#8220;save as&#8221;; file1.txt wouldn&#8217;t be modified, but the current buffer contents would be sent to file2.txt.</p>

<p>Instead of file2.txt, you can substitute a shell command to receive the buffer contents. For instance, :w !cat will just display the contents.</p>

<p>If Vim wasn&#8217;t run with sudo access, its :w can&#8217;t modify a protected file, but if it passes the buffer contents to the shell, a command in the shell can be run with sudo. In this case, we use tee.</p>

<h3>Understanding tee</h3>

<p>As for tee, picture the tee command as a T-shaped pipe in a normal bash piping situation: it directs output to specified file(s) and also sends it to standard output, which can be captured by the next piped command.</p>

<p>For example, in ps -ax | tee processes.txt | grep &#8216;foo&#8217;, the list of processes will be written to a text file and passed along to grep.</p>

<pre><code> +-----------+    tee     +------------+
 |           |  --------  |            |
 | ps -ax    |  --------  | grep 'foo' |
 |           |     ||     |            |
 +-----------+     ||     +------------+
                   ||   
           +---------------+
           |               |
           | processes.txt |
           |               |
           +---------------+
</code></pre>

<p>(Diagram created with Asciiflow.)</p>

<p>See the tee man page for more info.</p>

<h3>Tee as a hack</h3>

<p>In the situation your question describes, using tee is a hack because we&#8217;re ignoring half of what it does. sudo tee writes to our file and also sends the buffer contents to standard output, but we ignore standard output. We don&#8217;t need to pass anything to another piped command in this case; we&#8217;re just using tee as an alternate way of writing a file and so that we can call it with sudo.</p>

<h3>Making this trick easy</h3>

<p>You can add this to your .vimrc to make this trick easy-to-use: just type :w!!.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>" Allow saving of files as sudo when I forgot to start vim using sudo.
</span><span class='line'>cmap w!! w !sudo tee &gt; /dev/null %
</span><span class='line'>The &gt; /dev/null part explicitly throws away the standard output, since, as I said, we don't need to pass anything to another piped command.</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tmux lose colorscheme]]></title>
    <link href="http://tclh123.github.com/blog/2013/11/26/tmux-lose-colorscheme/"/>
    <updated>2013-11-26T11:19:00+08:00</updated>
    <id>http://tclh123.github.com/blog/2013/11/26/tmux-lose-colorscheme</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>alias tmux="TERM=screen-256color-bce tmux"</span></code></pre></td></tr></table></div></figure>


<p>And set up the default-terminal option in <code>~/.tmux.conf</code>,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>set -g default-terminal "screen-256color"
</span><span class='line'># set -g default-terminal "xterm"</span></code></pre></td></tr></table></div></figure>


<h2>Reference</h2>

<ul>
<li>http://rhnh.net/2011/08/20/vim-and-tmux-on-osx</li>
<li>http://stackoverflow.com/questions/10158508/lose-vim-colorscheme-in-tmux-mode#comment24005530_10264470</li>
<li>http://blog.longwin.com.tw/2011/04/tmux-learn-screen-config-2011/</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python string intern]]></title>
    <link href="http://tclh123.github.com/blog/2013/11/23/python-string-intern/"/>
    <updated>2013-11-23T19:44:00+08:00</updated>
    <id>http://tclh123.github.com/blog/2013/11/23/python-string-intern</id>
    <content type="html"><![CDATA[<p>今天在<code>__builtin__</code>里发现一个<code>intern</code>方法，（原来是internal的意思..
其实 C 里面有个文字常量区，就是说只要是字符串字面量都会存在那里。
才知道Python里不太一样，比如说</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; a = 'a b'
</span><span class='line'>&gt;&gt;&gt; b = 'a b'
</span><span class='line'>&gt;&gt;&gt; a is b
</span><span class='line'>False</span></code></pre></td></tr></table></div></figure>


<p>真相是，python只对由<code>0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz</code>中的字符组成的字符串自动做intern。
因为它们可能会更短&#8230;更像标识符..
另外，在 Python 3 中，似乎被移到<code>sys.intern</code>中去了</p>

<h2>Reference</h2>

<ul>
<li>http://stackoverflow.com/questions/1136826/what-does-python-sys-intern-do-and-when-should-it-be-used/1137293</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[always trust .rvmrc file]]></title>
    <link href="http://tclh123.github.com/blog/2013/11/23/always-trust-rvmrc-file/"/>
    <updated>2013-11-23T19:26:00+08:00</updated>
    <id>http://tclh123.github.com/blog/2013/11/23/always-trust-rvmrc-file</id>
    <content type="html"><![CDATA[<p>使用Octopress的时候目录里默认存在一个<code>.rvmrc</code>文件，</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm use 1.9.3</span></code></pre></td></tr></table></div></figure>


<p>目测是指定ruby版本用的。每次进入目录都会有<code>Do you wish to trust this .rvmrc file?</code>的提示，需要手动确认。
还是挺烦的&#8230;</p>

<p>其实，<code>rvm list</code> 可以看到我机子上只有这一个版本</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm rubies
</span><span class='line'>
</span><span class='line'>=&gt; ruby-1.9.3-p327 [ x86_64 ]</span></code></pre></td></tr></table></div></figure>


<p>所以这个 <code>.rvmrc</code> 是毫无意义的，可以删掉&#8230;
或者在<code>~/.rvmrc</code>里写入<code>export rvm_trust_rvmrcs_flag=1</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hylang]]></title>
    <link href="http://tclh123.github.com/blog/2013/11/10/hylang/"/>
    <updated>2013-11-10T00:29:00+08:00</updated>
    <id>http://tclh123.github.com/blog/2013/11/10/hylang</id>
    <content type="html"><![CDATA[<p>发现一个极好玩的项目，hylang，结合 List 跟 python 的写法&#8230;</p>

<blockquote><p>Lisp and Python should love each other. Let&#8217;s make it happen.</p></blockquote>

<p><a href="https://github.com/hylang/hy">https://github.com/hylang/hy</a></p>

<ul>
<li>Code: https://github.com/hylang/hy</li>
<li>Docs: http://hy.rtfd.org/</li>
<li>Quickstart: http://hy.rtfd.org/quickstart</li>
</ul>


<h3>社区</h3>

<p><a href="https://github.com/hylang">https://github.com/hylang</a></p>

<h3>以及由此发现的 python 实现语法词法分析相关的东东</h3>

<ul>
<li><a href="https://github.com/hylang/rply/">https://github.com/hylang/rply/</a></li>
<li><a href="https://github.com/alex/rply">https://github.com/alex/rply</a></li>
<li><a href="https://github.com/dabeaz/ply">https://github.com/dabeaz/ply</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[`python setup.py` install vs. `pip install .`]]></title>
    <link href="http://tclh123.github.com/blog/2013/11/08/%60python-setup-dot-py%60-install-vs-%60pip-install-%60/"/>
    <updated>2013-11-08T00:28:00+08:00</updated>
    <id>http://tclh123.github.com/blog/2013/11/08/`python-setup-dot-py`-install-vs-`pip-install-`</id>
    <content type="html"><![CDATA[<p>一些坑。</p>

<h3>Distutils</h3>

<p>http://docs.python.org/2/distutils/setupscript.html#installing-package-data</p>

<h3>setuptools &amp; pip</h3>

<p><a href="http://pythonhosted.org/setuptools/setuptools.html#using-find-packages">Building and Distributing Packages with Setuptools</a></p>

<p>https://pypi.python.org/pypi/setuptools/
http://www.pip-installer.org/en/latest/usage.html#pip-install
http://www.pip-installer.org/en/latest/logic.html#git
http://stackoverflow.com/questions/6947988/when-to-use-pip-requirements-file-versus-install-requires-in-setup-py
https://groups.google.com/d/msg/python-virtualenv/1eI6Z9_XRHE/cj6CCHvmS10J
http://stackoverflow.com/questions/2087148/can-i-use-pip-instead-of-easy-install-for-python-setup-py-install-dependen</p>

<h4>requirements.txt</h4>

<p><code>from pip.req import parse_requirements</code></p>

<p>http://stackoverflow.com/questions/14399534/how-can-i-reference-requirements-txt-for-the-install-requires-kwarg-in-setuptool?answertab=votes#answer-16624700</p>

<blockquote><p>Require pip>=1.2, as lower versions have a bug
https://github.com/erikrose/peep/commit/65367f66b777f17b1223569e1cd2f6250a820e99</p></blockquote>

<h4>尽管提供了dependency_lins依然默认安装PyPi版本的坑</h4>

<p>http://stackoverflow.com/questions/17366784/setuptools-unable-to-use-link-from-dependency-links/17442663#17442663
http://www.pip-installer.org/en/latest/logic.html#requirements-file-format</p>

<p><a href="http://www.packtpub.com/article/writing-a-package-in-python">Writing a Package in Python</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pip uninstall editable pkgs]]></title>
    <link href="http://tclh123.github.com/blog/2013/11/06/pip-uninstall-editable-pkgs/"/>
    <updated>2013-11-06T17:32:00+08:00</updated>
    <id>http://tclh123.github.com/blog/2013/11/06/pip-uninstall-editable-pkgs</id>
    <content type="html"><![CDATA[<p>http://stackoverflow.com/questions/17346619/how-to-uninstall-editable-packages-with-pip-installed-with-e</p>

<p>At {virtualenv}/lib/python2.7/site-packages/</p>

<ul>
<li>remove the egg file (e.g. distribute-0.6.34-py2.7.egg)</li>
<li>from file easy_install.pth, remove the corresponding line (it should be a path to the source directory or of an egg file).</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[setup raspberry pi on OS X]]></title>
    <link href="http://tclh123.github.com/blog/2013/10/04/setup-raspberry-pi-on-os-x/"/>
    <updated>2013-10-04T21:53:00+08:00</updated>
    <id>http://tclh123.github.com/blog/2013/10/04/setup-raspberry-pi-on-os-x</id>
    <content type="html"><![CDATA[<p>折腾了下树莓派，买了 PL2303串口TTL下载线，跟一个8G C10的TF带SD卡套。</p>

<p>只能串口访问，没买usb无线，没有多余网线。。不能SSH、开VNC。。不幸福</p>

<p>等能联网了再来折腾吧 →_→</p>

<hr />

<h2>setup the SD card</h2>

<ul>
<li>用DiskUtil把sd卡erase成ExFat格式</li>
<li>执行 <code>df -h</code> 来获得sd卡的设备路径</li>
<li>将系统img写入sd卡</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>tclh123@tclh123MBP ~ <span class="nv">$ </span>sudo dd <span class="nv">bs</span><span class="o">=</span>1m <span class="k">if</span><span class="o">=</span><span class="s2">&quot;/path/to/2013-09-25-wheezy-raspbian.img&quot;</span> <span class="nv">of</span><span class="o">=</span>/dev/rdisk2
</span><span class='line'>Password:
</span><span class='line'>2825+0 records in
</span><span class='line'>2825+0 records out
</span><span class='line'>2962227200 bytes transferred in 168.735466 secs <span class="o">(</span>17555451 bytes/sec<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And you can use <code>killall -INFO dd</code> to check the status of <code>dd</code> in  progress (<a href="http://www.commandlinefu.com/commands/view/5440/check-the-status-of-dd-in-progress-os-x">link</a>)</p>

<h2>串口通信</h2>

<ul>
<li>下载PL2303串口驱动</li>
</ul>


<p>http://www.prolific.com.tw/US/ShowProduct.aspx?p_id=229&amp;pcid=41
安装完需要重启。。</p>

<ul>
<li>下个minicom</li>
</ul>


<p><code>brew install minicom</code></p>

<p>ps. 我不知道为什么直接用screen连 <code>screen /dev/tty.usbserial 9600</code> 会乱码加卡死。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solve A+B Problem in python &amp; one line]]></title>
    <link href="http://tclh123.github.com/blog/2013/09/25/solve-a-plus-b-problem-in-python-and-one-line/"/>
    <updated>2013-09-25T02:23:00+08:00</updated>
    <id>http://tclh123.github.com/blog/2013/09/25/solve-a-plus-b-problem-in-python-and-one-line</id>
    <content type="html"><![CDATA[<p>Classical ACM/ICPC Problem</p>

<p>one test case is easy, how to support multi- test cases?</p>

<p>ex.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Input</span>
</span><span class='line'><span class="mi">1</span> <span class="mi">2</span>
</span><span class='line'><span class="mi">2</span> <span class="mi">4</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Output</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="mi">6</span>
</span></code></pre></td></tr></table></div></figure>


<p>in python 2.x</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">print_function</span><span class="p">;</span> <span class="kn">import</span> <span class="nn">sys</span><span class="p">;</span> <span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="k">print</span><span class="p">(</span><span class="nb">sum</span><span class="p">(</span><span class="n">x</span><span class="p">)),</span> <span class="p">[</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">())</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can test it on the Online Judge. :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[use Pandoc and LaTeX on OS X]]></title>
    <link href="http://tclh123.github.com/blog/2013/09/09/use-pandoc-and-latex-on-os-x/"/>
    <updated>2013-09-09T02:11:00+08:00</updated>
    <id>http://tclh123.github.com/blog/2013/09/09/use-pandoc-and-latex-on-os-x</id>
    <content type="html"><![CDATA[<h2>Installing</h2>

<ul>
<li><a href="http://code.google.com/p/pandoc/downloads/">Pandoc</a></li>
<li>MacTeX&#8217;s <a href="http://www.tug.org/mactex/morepackages.html">BasicTeX.pkg</a></li>
</ul>


<blockquote><p>For PDF output, you’ll also need LaTeX. We recommend installing BasicTeX (64M), and using the tlmgr tool to install additional packages as needed.</p></blockquote>

<p>Just download and run the pkg files.</p>

<p>Then add <code>/usr/texbin</code> to your $PATH(<code>export PATH=${PATH}:/usr/texbin;</code>).</p>

<p>Now, you get them installed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pandoc --version
</span><span class='line'>
</span><span class='line'>pdflatex -v
</span></code></pre></td></tr></table></div></figure>


<h3>Install tlmgr</h3>

<p><a href="http://www.tug.org/texlive/tlmgr.html">tlmgr - TeX Live package manager</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl http://ftp.ctex.org/mirrors/CTAN/systems/texlive/tlnet/update-tlmgr-latest.sh -O
</span><span class='line'>chmod a+x update-tlmgr-latest.sh
</span><span class='line'>./update-tlmgr-latest.sh
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>My Output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Verifying archive integrity... All good.
</span><span class='line'>Uncompressing TeX Live Manager Updater...........................................................................................................................................................................................
</span><span class='line'>./runme.sh: updating in /usr/local/texlive/2013basic...
</span><span class='line'>./runme.sh: tlmgr version says this is TeX Live 2013
</span><span class='line'>./runme.sh: proceeding with tlmgr update.
</span><span class='line'>D:tlmgr:main: ::tldownload_server defined
</span><span class='line'>D:Using shipped /usr/local/texlive/2013basic/tlpkg/installer/wget/wget.x86_64-darwin <span class="k">for </span>wget <span class="o">(</span>tested<span class="o">)</span>.
</span><span class='line'>D:Using shipped /usr/local/texlive/2013basic/tlpkg/installer/xz/xzdec.x86_64-darwin <span class="k">for </span>xzdec <span class="o">(</span>tested<span class="o">)</span>.
</span><span class='line'>D:Using shipped /usr/local/texlive/2013basic/tlpkg/installer/xz/xz.x86_64-darwin <span class="k">for </span>xz <span class="o">(</span>not tested<span class="o">)</span>.
</span><span class='line'>./runme.sh: <span class="k">done</span>.
</span></code></pre></td></tr></table></div></figure>


<p>and you can check the version by <code>tlmgr --version</code></p>

<figure class='code'><figcaption><span>setting default package repository</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo tlmgr option location http://mirror.ctan.org/systems/texlive/tlnet/
</span></code></pre></td></tr></table></div></figure>


<h2>Simple Usage</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pandoc test1.md -s -o test1.pdf
</span></code></pre></td></tr></table></div></figure>


<p><strong>TO be continued</strong></p>

<h2>Reference</h2>

<ul>
<li>https://github.com/mwhite/resume</li>
<li>http://tug.ctan.org/</li>
<li>http://www.ctan.org/tex-archive/fonts/tex-gyre/</li>
<li>http://www.ctan.org/tex-archive/macros/latex/contrib/titlesec</li>
<li>http://tex.stackexchange.com/questions/10706/pdftex-error-font-expansion-auto-expansion-is-only-possible-with-scalable</li>
<li>http://www.tug.org/mactex/morepackages.html</li>
<li>http://www.tug.org/texlive/</li>
<li>http://cmwelsh.com/beautiful-resumes-with-markdown-and-latex</li>
<li>http://sysadvent.blogspot.jp/2011/12/day-14-write-your-resume-in-markdown.html</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Plugin/MixIn/Monkey-patching]]></title>
    <link href="http://tclh123.github.com/blog/2013/08/26/python-plugin-slash-mixin-slash-monkey-patching/"/>
    <updated>2013-08-26T15:50:00+08:00</updated>
    <id>http://tclh123.github.com/blog/2013/08/26/python-plugin-slash-mixin-slash-monkey-patching</id>
    <content type="html"><![CDATA[<p><em>自从到豆瓣实习后，基本就博客就没更了，在github上的活动也都转到了code上&#8230;</em></p>

<h2>Reference</h2>

<ul>
<li><a href="http://markmail.org/message/y2znkmysqjlofswb#query:+page:1+mid:b52kpikcanonjva6+state:results">CPyUG</a></li>
<li><a href="http://abloz.com/2012/03/31/python-plug-ins-mixin-and-monkey-patching.html">python插件方式mixin和monkey-patching</a></li>
<li><a href="http://scg.unibe.ch/archive/papers/Duca06bTOPLASTraits.pdf">Traits: A Mechanism for Fine-grained Reuse</a></li>
<li><a href="http://guangboo.org/2013/01/28/python-mixin-programming">Python Mixin编程机制</a></li>
<li><a href="http://www.linuxjournal.com/node/4540/print">Using Mix-ins with Python</a></li>
<li><a href="http://stackoverflow.com/questions/533631/what-is-a-mixin-and-why-are-they-useful">stackoverflow - What is a mixin, and why are they useful?</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[折腾Chrome Secure Shell]]></title>
    <link href="http://tclh123.github.com/blog/2013/07/10/zhe-teng-chrome-secure-shell/"/>
    <updated>2013-07-10T01:23:00+08:00</updated>
    <id>http://tclh123.github.com/blog/2013/07/10/zhe-teng-chrome-secure-shell</id>
    <content type="html"><![CDATA[<blockquote><p>最近的觉悟是自己写代码太慢，对IDE的依赖是累积的，各种恶性循环（不足够了解语言，不熟悉项目结构）。半天憋不出几行代码，这种状态让人厌恶&#8230;以前对此持观望态度，各种纵容自己，现在发现这已经成为自己的一大瓶颈&#8230;</p></blockquote>

<p>这东西上次hack day的时候看<a href="https://github.com/atupal">
atupal</a>用过，印象蛮深。今天挖出来玩玩。</p>

<p>去<a href="https://chrome.google.com/webstore/detail/secure-shell/pnhechapfaindjhompbnflcldabbghjo?utm_source=chrome-ntp-icon">商店</a>安装的时候，提示<code>This application is not supported on this computer. Installation has been disabled.</code>，安装按钮直接变灰了。Google无果，看了下自己的Chrome版本，22&#8230;（mbp买来到现在没更过的节奏&#8230;），然后用&#8221;关于&#8221;里的自动更新报Error 12（以前也是这样所以一直没更吧..）。</p>

<h2>OS X下更新Chrome遇到Error 12</h2>

<p>试了<a href="https://support.google.com/chrome/answer/1367288?hl=en">官方</a>提供的方法，木有用。。Google出来的也大致都是删掉SoftwareUpdate然后再装一遍的意思，以及<a href="http://www.v2ex.com/t/52249">各种偏方</a>，无果。</p>

<p>然后想是不是因为现在版本太低（22->28）的缘故，最后直接把最新的<a href="https://www.google.com/intl/en/chrome/browser/">下来</a>覆盖了。后来发现完全无痛啊，因为现有的东西包括Extensions的localStorage都是放在<code>Application Support/</code>里的么。。</p>

<h2>配置Secure Shell</h2>

<p>然后很舒服地用着最新版，顺利地把Secure Shell装上了。</p>

<p>然后其实也不用什么配置是吧，输个<code>&lt;username&gt;@localhost</code>就好了。。结果报Connection refused。。用iTerm试了下<code>ssh localhost</code>同样是Connection refused（sshd服务没开的节奏&#8230;）</p>

<figure class='code'><figcaption><span>启动sshd服务</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo launchctl load -w /System/Library/LaunchDaemons/ssh.plist <span class="c"># unload是停止服务</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>查看是否启动</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo launchctl list | grep ssh
</span><span class='line'>...
</span><span class='line'>-   0   com.openssh.sshd <span class="c"># 看到这个说明成功启动了</span>
</span></code></pre></td></tr></table></div></figure>


<p>ok，现在已经可以顺利ssh到本地了。</p>

<p>另外，还可以直接授权publickey，这样就不用每次都输密码了（但是还是要输一次id_rsa私钥的密码，后面貌似shell会记住）。</p>

<figure class='code'><figcaption><span>直接把id_rsa.pub写入authorized_keys文件就行了</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys
</span></code></pre></td></tr></table></div></figure>


<h2>配置SSH root用户登陆</h2>

<p>用自己的账户登陆是ok了，但是尝试用root登陆时提示<code>Permission denied (publickey,keyboard-interactive)</code>错误。</p>

<p>先是加了/etc/sshd_config里的<code>PermitRootLogin yes</code>（开始把ssh_config跟sshd_config搞错了。。图样）。还是不行。</p>

<p>后来发现是OS X默认没有开启root用户，我输入的密码也只是<code>a valid sudoer password</code>，根本不是root的密码。</p>

<figure class='code'><figcaption><span>设置root的密码</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo passwd
</span></code></pre></td></tr></table></div></figure>


<p>之后就可以用root账户登陆了。</p>

<h2>其他</h2>

<p>Chrome Secure Shell 用起来很方便也很爽。但是我发现<code>ls</code>的时候中文目录名会乱码，中文文件内容可以正常显示。</p>

<p>还有就是不能输入中文（输入法无效。。）。</p>

<p><a href="http://git.chromium.org/gitweb/?p=chromiumos/platform/assets.git;a=tree;f=chromeapps/hterm">http://git.chromium.org/gitweb/?p=chromiumos/platform/assets.git;a=tree;f=chromeapps/hterm</a>，这个据说是前端的源码，可以拿来研究下（<a href="https://github.com/tclh123/kido">kido</a>参考）。但是clone了半天搞不下来。。= =（噗。。现在看了一下貌似死在3%了..）</p>

<h2>Reference</h2>

<ul>
<li>https://discussions.apple.com/thread/1141223?start=0&amp;tstart=0</li>
<li>http://blog.smitec.net/posts/setting-up-a-git-server-on-osx/</li>
<li>http://superuser.com/questions/555810/how-do-i-ssh-login-into-my-mac-as-root</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ImportError using Flask]]></title>
    <link href="http://tclh123.github.com/blog/2013/07/07/importerror-using-flask/"/>
    <updated>2013-07-07T15:38:00+08:00</updated>
    <id>http://tclh123.github.com/blog/2013/07/07/importerror-using-flask</id>
    <content type="html"><![CDATA[<p>巨二。</p>

<p>以后别把包名取做site，import的时候会跟python标准库里的site.py冲突。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[prevent 'Adobe Reader Updater Helper' automatic run with system on OS X]]></title>
    <link href="http://tclh123.github.com/blog/2013/07/06/os-x-jin-zhi-adobekai-ji-zi-dong-jian-cha-geng-xin/"/>
    <updated>2013-07-06T03:19:00+08:00</updated>
    <id>http://tclh123.github.com/blog/2013/07/06/os-x-jin-zhi-adobekai-ji-zi-dong-jian-cha-geng-xin</id>
    <content type="html"><![CDATA[<p>今天开机的时候发现Adobe Reader检查更新的进程自启动而且高CPU占用，不一会儿就弹出个更新提示窗口。</p>

<p>不爽之。</p>

<p>遂在 ~/Library/LaunchAgents 目录下发现 <code>com.adobe.ARM.202f4087f2bbde52e3ac2df389f53a4f123223c9cc56a8fd83a6f7ae.plist</code> 文件一枚，改后缀。。</p>

<p>文件内容是下面这样的。。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
</span><span class='line'>&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
</span><span class='line'>&lt;plist version="1.0"&gt;
</span><span class='line'>&lt;dict&gt;
</span><span class='line'>    &lt;key&gt;Label&lt;/key&gt;
</span><span class='line'>    &lt;string&gt;com.adobe.ARM.202f4087f2bbde52e3ac2df389f53a4f123223c9cc56a8fd83a6f7ae&lt;/string&gt;
</span><span class='line'>    &lt;key&gt;ProgramArguments&lt;/key&gt;
</span><span class='line'>    &lt;array&gt;
</span><span class='line'>        &lt;string&gt;/Applications/Adobe Reader.app/Contents/MacOS/Updater/Adobe Reader Updater Helper.app/Contents/MacOS/Adobe Reader Updater Helper&lt;/string&gt;
</span><span class='line'>        &lt;string&gt;semi-auto&lt;/string&gt;
</span><span class='line'>    &lt;/array&gt;
</span><span class='line'>    &lt;key&gt;RunAtLoad&lt;/key&gt;
</span><span class='line'>    &lt;true/&gt;
</span><span class='line'>    &lt;key&gt;StartInterval&lt;/key&gt;
</span><span class='line'>    &lt;integer&gt;12600&lt;/integer&gt;
</span><span class='line'>&lt;/dict&gt;
</span><span class='line'>&lt;/plist&gt;</span></code></pre></td></tr></table></div></figure>


<p>在Adobe Reader程序<a href="http://helpx.adobe.com/acrobat/kb/disable-automatic-updates-acrobat-reader.html">首选项里改</a>，也许也可以不弹出更新提示，但是不知道是否依然会有自启动的进程。</p>

<p>反正两边都弄了应该没事了~&#8230;.</p>

<h2>Update</h2>

<p>总结几个OS X潜在的自启动的地方。</p>

<ul>
<li>/Library/LaunchDaemons/</li>
<li>/Library/LaunchAgents/</li>
<li>~/Library/LaunchAgents/</li>
<li>/System/Library/StartupItems</li>
<li>/Library/StartupItems</li>
<li>GUI 的 Login Items（系统偏好，用户群组，登陆项），<em>找不到对应的文件？</em></li>
</ul>


<p>另外这两个是系统级的，</p>

<ul>
<li>/System/Library/LaunchDaemons/</li>
<li>/System/Library/LaunchAgents/</li>
</ul>


<p>Ps. 加载顺序应该是 Daemons->Agents->StartupItems（在/System/Library/LaunchDaemons/里可以找到com.apple.SystemStarter.plist，由com.apple.SystemStarter进程负责加载StartupItems）。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[About Css Preprocessor]]></title>
    <link href="http://tclh123.github.com/blog/2013/07/05/about-css-preprocessor/"/>
    <updated>2013-07-05T23:58:00+08:00</updated>
    <id>http://tclh123.github.com/blog/2013/07/05/about-css-preprocessor</id>
    <content type="html"><![CDATA[<p>在Bootstrap那里看过less，在Octopress那里看过sass。还几次搞混了。了解一下。</p>

<h2>Reference</h2>

<ul>
<li><a href="http://www.ruanyifeng.com/blog/2012/06/sass.html">SASS用法指南</a></li>
<li><a href="http://www.qianduan.net/an-introduction-to-less-and-comparison-to-sass.html">LESS介绍及其与Sass的差异</a></li>
<li><a href="http://www.bootcss.com/lesscss.html">LESS - 一种 动态 样式 语言.</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于无中心网络及本地分享、社交？]]></title>
    <link href="http://tclh123.github.com/blog/2013/07/05/guan-yu-wu-zhong-xin-wang-luo/"/>
    <updated>2013-07-05T22:11:00+08:00</updated>
    <id>http://tclh123.github.com/blog/2013/07/05/guan-yu-wu-zhong-xin-wang-luo</id>
    <content type="html"><![CDATA[<p>今天在听歌的时候，突然有点想法，如果几个朋友出去（地铁里，噪杂的酒吧，或者旅行），可以一起听一首歌（用各自的移动设备，or Glass??），就像几个人呆在一个自己的私密空间里，是不是还蛮酷？</p>

<p>自然得想到如何实现。如果是有个人充当server的方式，显然不太优美。自然地想到一个挺像的东西，AirDrop，它貌似就是个去中心的点对点网络，这种东西用来做本地的分享、社交很合适。</p>

<p>但是AirDrop现在貌似还只能用于传文件（据说是因为WiFi耗电问题没法取代蓝牙？）。这个暂不论了。</p>

<p>于是我又想到，bit网络（bit coin什么的不是很火吗）。私密社交？+移动。</p>

<p>嗯。。我觉得这方面将来肯定会产生点有意思的东西。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LEX、YACC初识]]></title>
    <link href="http://tclh123.github.com/blog/2013/06/22/lex/"/>
    <updated>2013-06-22T01:50:00+08:00</updated>
    <id>http://tclh123.github.com/blog/2013/06/22/lex</id>
    <content type="html"><![CDATA[<p>以前只用下降子程序的方法手写过一个解释器，<a href="http://iplot.tclh123.com/">iplot</a>。</p>

<p>现在学院又开一门课，叫程序分析&#8230;讲的还是编译原理&#8230;只不过是让借助工具&#8230;两个实验，一个是LEX+YACC，一个是ANTLR。</p>

<p>那咱就学下LEX+YACC&#8230;.</p>

<h2>START</h2>

<p>Lex 代表 Lexical Analyzar。Yacc 代表 Yet Another Compiler Compiler。</p>

<p>Unix或Linux都自带Lex跟YACC，我用的OS X，跟GNU/Linux下面的一样，Lex是flex，而Yacc则是bison。</p>

<h2>Lex</h2>

<p>lex和flex都是解析Lex文件的工具，用法相近，flex意为fast lexical analyzer generator。可以看成lex的升级版本。</p>

<p><strong>挖坑未填完，先把实验做掉。。</strong></p>

<h2>Reference</h2>

<p>http://blog.csdn.net/liwei_cmg/article/details/1530999</p>

<p>http://www.ibm.com/developerworks/cn/linux/sdk/lex/</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SA到底是什么]]></title>
    <link href="http://tclh123.github.com/blog/2013/06/22/sadao-di-shi-shi-yao/"/>
    <updated>2013-06-22T01:47:00+08:00</updated>
    <id>http://tclh123.github.com/blog/2013/06/22/sadao-di-shi-shi-yao</id>
    <content type="html"><![CDATA[<p><em>原谅我又拿考试复习的东西丢上来了 - -，而且这坑没填干净..</em></p>

<p><em>笔记而已，都是根据教材剖析出来的，加上一些自己的理解。</em></p>

<h2>概念</h2>

<ul>
<li>软件</li>
<li>体系结构(Architecture)= 架构</li>
<li>设计元素 = 组件 or 连接件</li>
<li>SA 包括 设计元素的描述、交互、组合的模式、模式中的约束。</li>
<li>SA = 组件+连接件+约束</li>
<li>组件，连接件应该都是集合</li>
</ul>


<h2>风格</h2>

<h3>概念</h3>

<ul>
<li>SA风格，是描述特定系统组织模式的惯用范例，强调<strong>组织模式</strong>跟<strong>惯用范例</strong></li>
</ul>


<h3>分类</h3>

<ol>
<li>数据流系统(Data Flow)，就是数据顺序流过多个组件，如 批处理序列(batch sequential)，管道和过滤器(Pipes &amp; Fliters)</li>
<li>调用返回系统(Call/Return)，这个不用解释了吧~ 如 主/子程序(main program &amp; subroutine)，面向对象系统(Object Oriented)，分层系统(layered)<em>这里把C/S归为分层，两层或三层(应用服务器)，B/S归为C/S的特例</em></li>
<li>数据中心系统(知识库，data-centered)，就是数据都放在中心节点，如 仓库(repository)，黑板(blackboard)</li>
<li>虚拟机(Virtual Machine)，可以理解成一个模拟器，如 解释器(interpreter)，基于规则系统(rule-based system)</li>
<li>独立构件(independent components)，<strong>不知道在说什么..</strong>，如 通信过程(communicating processes)，事件系统(event systems，分显式、隐式调用<strong>？</strong>)</li>
</ol>


<p>这5种风格具体就先不介绍了。。<em>感觉书上的都是老的东西，以我在这个时代的认知读起来感觉很扯。。咱尽量不八股。。</em></p>

<p>下面简单挑几个说一点，</p>

<h3>PS</h3>

<p>黑板模式，就好像多位不同的专家在同一黑板上交流思想，每个专家都可以获得别的专家写在黑板上的信息，同时也可以用自己的分析去更新黑板上的信息，从而影响其它专家。</p>

<p>解释器，用来执行其他程序的程序，不单单指通常的编程语言解释器，也可以按大的理解，如浏览器（HTML、CSS、JS），通信协议（TCP/IP，socket），甚至是处理用户输入的一些Parser也可以算（parse了之后赋予语义）。</p>

<p>管道过滤器，这个挺好理解的，而且感觉挺有意思的，以后有机会可以找个项目实现一下。记得以前搞MVC.NET的时候看过那种Fliter。</p>

<h2>建模（Modeling）</h2>

<h3>什么决定你的建模</h3>

<p>架构师跟利益相关者，进行cost/benefit权衡。</p>

<p>简单说就是客户给基本需求，架构师进行分析，做权衡。</p>

<h3>建模什么</h3>

<p>基本的架构元素(architectural elements)，</p>

<ul>
<li>Components（组件or构件）</li>
<li>Connectors（连接件）</li>
<li>Interfaces（接口）</li>
<li>Configurations（配置？结构？）</li>
<li>Rationale - reasoning behind decisions</li>
</ul>


<h3>模型的要点</h3>

<ul>
<li>无歧义</li>
<li>准确且精确
<em>PS.准确指正确，接近目标；精确指不矛盾、无歧义，击中一个地方，但不一定正确</em></li>
</ul>


<h3>视图</h3>

<p>View（视图）是一个subset-model(模型子集)，viewpoint（视点）是指关注点、标准(concern,criteria)。</p>

<p>这个学过数据库应该都知道，就是东西都放在一个模型里太复杂了，就分开放到多个视图里，每个视图只用说清楚一类事情，视图的划分由视点(viewpoint)来决定。</p>

<p>常用的viewpoints，</p>

<ul>
<li>Logical Viewpoints</li>
<li>Physical Viewpoints</li>
<li>Deployment Viewpoints</li>
<li>Concurrency Viewpoints</li>
<li>Behavioral Viewpoints</li>
</ul>


<p>比方说，用deployment做视点，那可能整个model就被分为server、client两个视图。</p>

<h3>建模方法</h3>

<h4>通常方法</h4>

<ul>
<li>自然语言</li>
<li>PowerPoint-style modeling</li>
<li>UML(the Unified Modeling Language)</li>
</ul>


<h4>其他</h4>

<ul>
<li>早期的ADL(architecture description languages)</li>
<li>Domain- and style-specific languages</li>
<li>Extensible architecture description languages</li>
</ul>


<h2>文档描述（Documenting）</h2>

<h3>用途</h3>

<p>正规的软件开发过程有很多角色参与，需要一个交流设计思想的媒介。</p>

<h2>架构设计（architecture design）</h2>

<h3>架构模式</h3>

<p><em>没提到？感觉就是架构风格（Pattern = Style）</em></p>

<h3>质量属性(Quality Attributes)</h3>

<p>系统不仅需要满足功能特性(functionality)，还需要满足其他一些质量属性(QA)。功能特性跟质量属性是正交的，功能不会决定质量。</p>

<p>达到特定质量属性，需要考虑设计、实现、部署三方面。</p>

<p>质量属性本身是没有多大用的，需要在<strong>明确</strong>质量属性（specifying QA）的过程中来帮助架构设计。</p>

<p>常见的质量属性有6种（USTAMP），</p>

<ul>
<li>Usability（易用性），方便使用</li>
<li>Security（安全性），入侵检测、入侵容忍、多机备份</li>
<li>Testability（可测试性），单元测试、错误可复现、语句覆盖度(Path Coverage?)</li>
<li>Availability（可用性），系统在任一时刻正常工作的概率</li>
<li>Modifiability（可修改性），修改指采用新的算法、数据结构、UI等</li>
<li>Performance（性能），系统响应时间，硬件资源的占用率</li>
</ul>


<p>其他，</p>

<ul>
<li>Scalability（可伸缩性）</li>
<li>Portability（可移植性）</li>
<li>etc.</li>
</ul>


<h4>质量属性场景(QAS)</h4>

<p>所以，我们就需要 质量属性场景(QA Scenarios)。在特定场景中去明确质量属性。</p>

<p>一个场景分为6部分，</p>

<ul>
<li>source</li>
<li>stimulus</li>
<li>artifact</li>
<li>environment</li>
<li>response</li>
<li>response measure</li>
</ul>


<p>一句话说，就是 刺激源，在特定环境(条件、系统模式)下，用特定刺激(n.)去刺激(v.)制品(指系统或code)，然后获得反应，最后测量（度量）反应。</p>

<p><strong>来说明系统达到这个质量属性的程度。</strong></p>

<h3>战术(Tactics)</h3>

<p>目前架构师主要工作是复用以前架构的方法（即很少凭空创造），这些方法（解决方案）大部分指 Patterns &amp; Styles，小部分指 Tactics。</p>

<p><strong>疑问，架构模式(architectural patterns)跟架构风格(styles)基本是一个意思，那架构模式跟设计模式(design patterns)又有什么区别？</strong></p>

<p>而战术（Tactics），是用来实现质量属性反应（quality attribute response）的。它是影响控制质量属性反应的设计决策。我们又称一个战术集合为一个架构策略(architectural strategy)。</p>

<p>对6个常见的质量属性（USTAMP），相应地有6个战术，</p>

<ul>
<li>Usability Tactics（易用性战术），运行时战术(runtime tactics)、设计时战术(design-time tactics，包括MVC、PAC等)<strong>?</strong></li>
<li>Security Tactics（安全性战术），抵抗攻击(resisting attacks)，检测攻击(detecting attacks)，从攻击中恢复(recovering from attacks)</li>
<li>Testability Tactics（可测试性战术），提供输入捕获输出(providing input &amp; capturing output)，内部监控(internal monitoring)</li>
<li>Availability Tactics（可用性战术），错误检测(fault detection)、错误恢复(fault recovery)、错误预防（错误阻止，fault prevention）</li>
<li>Modifiability Tactics（可修改性战术），局部修改(Localize Modifications)，防止连锁反应(Prevent Ripple Effects)，推迟绑定时间(Defer Binding Time)</li>
<li>Performance Tactics（性能战术），控制资源需求(Resource Demand)，资源管理(Resource Management)，资源仲裁(Resource Arbitration)</li>
</ul>


<h3>设计操作（Design Operators）</h3>

<p>设计操作是创建一个体系结构设计的重要设计工具。包括以下5个操作，</p>

<ul>
<li>Decomposition（分解）</li>
<li>Replication（复制，冗余）</li>
<li>compression（压缩）</li>
<li>abstraction（抽象）</li>
<li>resource sharing（资源共享）</li>
</ul>


<p><strong>？没细看</strong></p>

<h3>质量属性驱动的设计(ADD, Attribute-driven design)</h3>

<p>ADD是一步一步地系统地生成初步的体系结构设计的方法。</p>

<p>ADD的结果：全部的结构决策、内部连接和协调机制、应用模式和策略制定各部分的机制、显式达到质量属性的要求、不能详细到接口！</p>

<p>ADD输入：质量属性需求、功能需求、约束。</p>

<p>ADD步骤：
1. 确定足够的需求信息
2. 选择系统的一部分分解
3. 优先部分需求以及标识架构驱动
4. 选择满足与所选择的系统分解向关联的那部分系统的架构驱动的设计概念：模式(patterns)、风格(styles)、策略(tactics)
5. 实例化(instantiated)架构元素，分配功能性需求
6. 归并(merge)设计完成
7. 分配剩下的功能性需求
8. 定义戒口给实例化元素
9. 检查和提炼需求，使他们能约束实例化元素
10. 对于系统的下一个分解部分，重复步骤2到9</p>

<h3>架构评估</h3>

<ul>
<li>SAAM: Scenario-based Architecture Analysis Method</li>
<li>ATAM: Architecture Trade-off Analysis Method</li>
</ul>


<p>这里主要介绍 ATAM（框架权衡分析法）。</p>

<p>&#8230;</p>

<h4>效用树</h4>

<p>&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chrome Extension manifest V2]]></title>
    <link href="http://tclh123.github.com/blog/2013/06/18/chrome-extension-manifest-v2/"/>
    <updated>2013-06-18T01:28:00+08:00</updated>
    <id>http://tclh123.github.com/blog/2013/06/18/chrome-extension-manifest-v2</id>
    <content type="html"><![CDATA[<p>今天兴起想写个 Chrome Extension，研究了一番，稍有点头绪。
想到天天用的 Fawave，去找了下它<a href="http://code.google.com/p/falang/source/checkout">源码</a>（原项目名叫falang&#8230;好名字！）。</p>

<p>不看不知道，一看发现它逻辑这么复杂。。而且光看popup.html我就头大了。。
那个神一样模版语言（<code>&lt;?js ... ?&gt;...#{...}...</code>）。。见都没见过。</p>

<p>搞半天弄清楚他用的是<a href="http://www.kuwata-lab.com/tenjin/jstenjin-users-guide.html">shotenjin.js</a>，是tenjin.js的子集，用于client-side。略小众啊，都搜不到什么相关信息。不过超轻量，整个就100多行代码，用法也真心简单。</p>

<p>又看了半天源码，似乎摸清楚几个困惑的点，</p>

<ul>
<li>chrome extension 的 popup.html 不支持持久化，每次点一下相当于要重新载入</li>
<li>像我这种比较小的需求，应该就是每次载入都从localStorage里拿数据出来更新DOM</li>
<li>fawave那些timeline用localStorage肯定放不下的，貌似是利用 background.html 来做本地缓存（cache。写得好像很吊，就看了一点）。</li>
</ul>


<p>总结一下，其实上面几个点就是纠结 popup.html 里的数据的持久化。</p>

<p>墨迹完了~~</p>

<h2>真正跟标题相关的内容</h2>

<p>fawave用的是manifest V1，我用的V2。于是我用shotenjin.js来解析模版就出现了问题。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Uncaught Error: Code generation from strings disallowed for this context</span></code></pre></td></tr></table></div></figure>


<p>经过一番搜索。。。发现是V2不再支持eval()，而shotenjin.js里必须用了eval()啊。。。</p>

<p>具体解决方法参照，</p>

<p><a href="http://www.360marks.com/?p=375">Chrome extension 升级到 manifest version 2 的问题</a></p>

<p><a href="http://developer.chrome.com/trunk/extensions/sandboxingEval.html">Using eval in Chrome Extensions. Safely.</a></p>

<p>因为不想换模版引擎，我用的是官方给的方法，用一个sandbox 的iframe，来代替进行eval()。。</p>

<p>但是。。仍然有问题（好吧这个问题证明是我是小白），简单说就是我想在popup.html load的时候就进行模版渲染，但是那个时候iframe里的script还没执行，message事件还没注册。。</p>

<p>解决方法是，</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$('sandbox').onload = function() {
</span><span class='line'>    init();
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>这样保证 init（给iframe发消息让它渲染模版）时， iframe 已经 load，就行了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Open Terminal(iTerm2) in Current Folder]]></title>
    <link href="http://tclh123.github.com/blog/2013/06/14/open-terminal-iterm2-in-current-folder/"/>
    <updated>2013-06-14T15:58:00+08:00</updated>
    <id>http://tclh123.github.com/blog/2013/06/14/open-terminal-iterm2-in-current-folder</id>
    <content type="html"><![CDATA[<p>原来Terminal一直用自带的，现在改成iTerm2。
google到一些<a href="http://www.dbform.com/html/2011/1559.html">用AppleScript解决的方案</a>，经测试不可用，估计是OS X 10.8改了什么东西。
没空研究AppleScript&#8230;</p>

<p>然后意识到也许可以把Go2Shell的默认Terminal改一下，然后确实google到了方法。。</p>

<h2>Solution</h2>

<ol>
<li>Download Go2Shell.</li>
<li>Change your default Go2Shell terminal to iTerm2.</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>open -a Go2Shell --args config
</span></code></pre></td></tr></table></div></figure>


<p>That will open the configuration screen.</p>
]]></content>
  </entry>
  
</feed>
