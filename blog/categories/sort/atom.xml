<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: sort | Tclh123's 3rd Blog]]></title>
  <link href="http://tclh123.github.com/blog/categories/sort/atom.xml" rel="self"/>
  <link href="http://tclh123.github.com/"/>
  <updated>2013-11-10T00:42:52+08:00</updated>
  <id>http://tclh123.github.com/</id>
  <author>
    <name><![CDATA[tclh123]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[各种排序算法]]></title>
    <link href="http://tclh123.github.com/blog/2013/05/04/ge-chong-pai-xu-suan-fa/"/>
    <updated>2013-05-04T15:31:00+08:00</updated>
    <id>http://tclh123.github.com/blog/2013/05/04/ge-chong-pai-xu-suan-fa</id>
    <content type="html"><![CDATA[<p>这篇东西其实是当时为了找实习而复习排序弄的，面试官无聊就喜欢问你个排序，如果你连插入排序跟选择排序都分不清楚的话还是别去找虐了。</p>

<h2>几种排序</h2>

<p>大致按算法难度、类型从上到下排。</p>

<p><em>算法描述都按升序排序，复杂度都指平均复杂度。</em></p>

<ul>
<li><p>冒泡排序</p>

<p>  模拟<strong>气泡</strong>浮上来的过程，n-1趟float，时间复杂度O( n<sup>2</sup> )</p></li>
<li><p>选择排序，一般指简单选择排序</p>

<p>  每次在无序区中<strong>选择</strong>出最大的元素，然后放到有序区跟无序区间，n-1趟，时间复杂度O( n<sup>2</sup> )</p></li>
<li><p>插入排序，一般指直接插入排序，还有折半插入排序、2-路插入排序、表插入排序等</p>

<p>  本质：元素插入到有序列。</p>

<p>  左边有序区，右边无序区（待排），每次将无序区最左边的元素<strong>插入</strong>到有序区中合适的位置（故涉及到元素的右移），n-1次，时间复杂度O( n<sup>2</sup> )</p></li>
<li><p>希尔排序，对直接插入排序的改进</p>

<p>  简单来说，就是取不同步长，进行多次插入排序，最后步长为1，就是以此直接插入排序。重点在于步长的选择，原始版本步长为n/( 2<sup>i</sup> )，最坏复杂度O( n<sup>2</sup> )。现在最好的步长可以达到O( n(logn)<sup>2</sup> )，仅次于O(nlogn)的排序。</p>

<p>  <a href="http://zh.wikipedia.org/wiki/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F">可以想象成取不同的行宽，按列进行插入排序。</a></p>

<p>  当刚开始元素很无序的时候，步长最大，所以插入排序的元素个数很少，速度很快；当元素基本有序了，步长很小，插入排序对于有序的序列效率很高。</p></li>
<li><p>基数排序</p>

<p>  这篇文章的唯一一个非比较型排序算法。基数（Radix），即数的进制。之所以能够不进行比较，是因为它按数位将数分配到Radix个桶中，再顺序进行收集。</p>

<p>  有LSD（Least significant digital）、MSD（Most significant digital）两种方式。需要进行k(数据中最大位数)趟，每趟分配要O(n)，收集要O(radix)，所以总复杂度O(k(n+radix))。</p></li>
<li><p>归并排序，一般指2-路归并排序，还有非递归归并排序、自然归并排序等。</p>

<p>  本质：分治，有序列合并。</p>

<p>  二分需要O(logn)，合并需要O(n)，总时间复杂度O(nlogn)。需要O(n)的额外空间，用于存放合并有序列的临时结果。</p></li>
<li><p>快速排序</p>

<p>  本质：分治，Patition。</p>

<p>  难点在于Patition，要做到O(n)的时间复杂度。简单来说，就是选最左边的作为pivot，并维护值，然后两个指针，从右往左扫，从左往右扫，遇到不合适的，则换到另一边。直到两个指针相遇。</p>

<p>  总平均时间复杂度O(nlogn)。</p></li>
<li><p>堆排序</p>

<p>  本质：堆（分治）</p>

<p>  升序排列的话需要借助大顶堆，涉及max_heapify、sift_down两个子操作。其中sift_down类似直接插入排序中的数组右移。</p>

<p>  其实说白了就是二叉堆上的插入排序。</p></li>
</ul>


<h3>归类</h3>

<p>冒泡、选择、插入，都可以认为是将元素划分为有序区、无序区，都要n-1趟处理（无序区拓展到有序区），时间复杂度都是O( n<sup>2</sup> )。</p>

<p>希尔，实现起来很简单，采用最佳步长的话，复杂度可以达到O( n(logn)<sup>2</sup> )，仅次于O(nlogn)的排序。而且插入排序在元素基本有序的情况下时间复杂度接近O(n)。在一些情况下还是很有优势的。</p>

<p>基数，非比较型排序算法，类似的还有桶排序等。在数据有一定限制（比如都在0~1000间），数据量很大（比较型算法最快也要O(nlogn)）的情况下，可以考虑非比较型算法，可以O(n)完成。</p>

<p>归并、快速、堆排，都应用了分治思想，平均复杂度都是O(nlogn)。这也是基于比较的排序算法的极限了。</p>

<h2>具体实现</h2>

<p>我希望用最简洁的代码实现算法。</p>

<p>因为面试一般不让写伪代码，而且是在纸上写，所以我就不用宏定义写得标准一点了。</p>

<p><em>Ps. 我原来写swap是这样写，<code>inline int swap(int &amp;x, int &amp;y) { x^=y; y^=x; x^=y; }</code>，结果被坑了，why？试想x、y地址一样的话...</em></p>

<p>``` cpp</p>

<h1>include <cstdio></h1>

<h1>include <cstring></h1>

<h1>include <iostream></h1>

<h1>include <list></h1>

<p>using namespace std;
inline int swap(int &amp;x, int &amp;y) { int t = x; x = y; y = t; }
inline int max(int x, int y) { return (x>y)? x: y; }
inline int min(int x, int y) { return (x&lt;y)? x: y; }</p>

<h1>define bug(s) cout&lt;&lt;#s&lt;&lt;"="&lt;&lt;s&lt;&lt;" "</h1>

<p>// 冒泡，O(n<sup>2)</sup>
void bubble_sort(int *a, int n) {</p>

<pre><code>for(int k=0; k&lt;n-1; k++) {
    for(int i = 0; i&lt;n-1-k; i++) {
        if(a[i]&gt;a[i+1])
            swap(a[i], a[i+1]);
    }
}
</code></pre>

<p>}</p>

<p>// 简单选择，O(n<sup>2)</sup>
void selection_sort(int *a, int n) {</p>

<pre><code>for(int k=0; k&lt;n-1; k++) {
    int maxi = 0;
    for(int i=1; i&lt;n-k; i++) {
        if(a[maxi] &lt; a[i])
            maxi = i;
    }
    swap(a[maxi], a[n-1-k]);
}
</code></pre>

<p>}</p>

<p>// 直接插入，O(n<sup>2)</sup>
void insert_sort(int *a, int n) {</p>

<pre><code>for(int i=1, j; i&lt;n; i++) {
    int t = a[i];
    for(j=i-1; j&gt;=0 &amp;&amp; a[j]&gt;t; j--) a[j+1] = a[j];
    a[j+1] = t;
}
</code></pre>

<p>}</p>

<p>// 希尔，O(n<sup>2)</sup>
void shell_sort(int *a, int n) {</p>

<pre><code>for(int gap = n/2; gap&gt;0; gap/=2) {
    for(int i=gap, j; i&lt;n; i++) {
        int t = a[i];
        for(j=i-gap; j&gt;=0 &amp;&amp; a[j]&gt;t; j-=gap) a[j+gap] = a[j];
        a[j+gap] = t;
    }
}
</code></pre>

<p>}</p>

<p>// 基数，O(k<em>(n+r))，假设radix=10, k=5
void radix_sort(int </em>a, int n) {</p>

<pre><code>list&lt;int&gt; l[10];
int r = 10, k = 5;
for(int i=0, e=1; i&lt;k; i++, e*=10) {
    for(int j=0; j&lt;n; j++) {
        l[a[j]/e%10].push_back(a[j]);
    }
    for(int j=0, m=0; j&lt;r; j++) {
        while(!l[j].empty()) {
            a[m++] = l[j].front();
            l[j].pop_front();
        }
    }
}
</code></pre>

<p>}</p>

<p>// 归并，O(nlog(n))
void merge(int <em>a, int l, int mid, int r, int </em>t) {</p>

<pre><code>int i, j, c = 0;
for(i=l, j=mid+1; i&lt;=mid &amp;&amp; j&lt;=r;) {
    if(a[i]&lt;a[j]) t[c++] = a[i++];
    else t[c++] = a[j++];
}
while(i&lt;=mid) t[c++] = a[i++];
while(j&lt;=r) t[c++] = a[j++];
for(c=0; c&lt;r-l+1; c++) a[l+c] = t[c];
</code></pre>

<p>}
void m_sort(int <em>a, int l, int r, int </em>t) {</p>

<pre><code>if(l&lt;r) {
    int mid = (l+r)&gt;&gt;1;
    m_sort(a, l, mid, t);
    m_sort(a, mid+1, r, t);
    merge(a, l, mid, r, t);
}
</code></pre>

<p>}
void merge_sort(int *a, int n) {</p>

<pre><code>int *t = (int*)malloc(sizeof(int)*n);   // 统一用一个临时空间
m_sort(a, 0, n-1, t);
free(t);
</code></pre>

<p>}</p>

<p>// 快速排序，O(nlogn)
int patition(int *a, int l, int r) {</p>

<pre><code>int t = a[l];   //pivot
while(l&lt;r) {
    while(l&lt;r &amp;&amp; a[r]&gt;=t) r--;
    a[l] = a[r];
    while(l&lt;r &amp;&amp; a[l]&lt;=t) l++;
    a[r] = a[l];
}
a[l] = t;
return l;
</code></pre>

<p>}
void q_sort(int *a, int l, int r) {</p>

<pre><code>if(l&lt;r) {
    int q = patition(a, l, r);
    q_sort(a, l, q-1);
    q_sort(a, q+1, r);
}
</code></pre>

<p>}
void quick_sort(int *a, int n) {</p>

<pre><code>q_sort(a, 0, n-1);
</code></pre>

<p>}</p>

<p>// 堆排序，O(nlogn)</p>

<h1>define lson(e) (e)&lt;&lt;1|1</h1>

<p>void sift_down(int *a, int n, int i) {  // 类似直接插入排序的sift</p>

<pre><code>int t = a[i];
for(int j=lson(i); j&lt;n; i=j, j=lson(i)) {
    if(j+1&lt;n &amp;&amp; a[j]&lt;a[j+1]) j++;   // 取较大的节点
    if(t&gt;a[j]) break;
    a[i] = a[j];
}
a[i] = t;
</code></pre>

<p>}
void max_heapify(int *a, int n) {</p>

<pre><code>for(int i=n/2-1; i&gt;=0; i--) {
    sift_down(a, n, i);
}
</code></pre>

<p>}
void heap_sort(int *a, int n) {</p>

<pre><code>max_heapify(a, n);
for(int i=n-1; i&gt;=1; i--) {
    swap(a[0], a[i]);
    sift_down(a, i, 0);
}
</code></pre>

<p>}</p>

<p>int main() {</p>

<pre><code>int a[] = {5,4,3,1,6,8,9,16,15};
int n = sizeof(a)/sizeof(a[0]);
// bubble_sort(a, n);
// selection_sort(a, n);
// insert_sort(a, n);
// shell_sort(a, n);
// radix_sort(a, n);
// merge_sort(a, n);
// quick_sort(a, n);
heap_sort(a, n);
for(int i=0; i&lt;n; i++) {
    printf("%d ", a[i]);
}
// 1 3 4 5 6 8 9 15 16
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>
